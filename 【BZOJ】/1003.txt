#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100+10, MAXM = 100000+10;
int head[MAXN],tol,nxt[MAXM],to[MAXM],cost[MAXM];

inline void add_edge(int u, int v, int c)
{
	nxt[tol] = head[u],to[tol] = v,cost[tol] = c;
	head[u] = tol++;
}
struct NODE{
	int u,dis;
	bool operator<(const NODE&t)const{
		return dis > t.dis;
	}
};
int dis[MAXN],vis[MAXN],del[MAXN];
int dijkstra(int s, int t)
{
	priority_queue<NODE> q;
	clc(dis,0x3f);
	clc(vis,0);
	dis[s] = 0;
	q.push(NODE{s,0});
	while(!q.empty())
	{
		NODE now = q.top();q.pop();
		int u = now.u;
		if(u == t) return now.dis;
		if(dis[u] > now.dis) dis[u] = now.dis;
		if(vis[u]) continue;
		vis[u] = true;
		for(int i = head[u]; ~i; i = nxt[i])
		{
			int v = to[i];
			if(!del[v] && dis[v] > dis[u]+cost[i]) q.push(NODE{v,dis[u]+cost[i]});
		}
	}
	return INF;
}
int v[MAXN][MAXN],p[MAXN*100],st[MAXN*100],ed[MAXN*100],dp[MAXN];

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n,m,k,e;
	scanf("%d%d%d%d", &n, &m, &k, &e);
	clc(head,-1);tol = 0;
	while(e--)
	{
		int u,v,c;
		scanf("%d %d %d", &u, &v, &c);
		add_edge(u,v,c);
		add_edge(v,u,c);
	}
	int d;
	scanf("%d", &d);
	rep(i,0,d) scanf("%d %d %d", &p[i],&st[i],&ed[i]);
	repe(i,1,n)
	{
		repe(j,i,n)
		{
			clc(del,0);
			rep(k,0,d)
			{
				if(j >= st[k] && i <= ed[k])
					del[p[k]] = true;
			}
			v[i][j] = dijkstra(1,m);
		}
	}
	clc(dp,0x3f);
	dp[0] = 0;
	repe(i,1,n)
	{
		rep(j,0,i)
		{
			if(v[j+1][i] == INF) continue;
			dp[i] = min(dp[i],dp[j]+v[j+1][i]*(i-j)+k);
		}
	}
	printf("%d\n", dp[n]-k);
	return 0;
}
