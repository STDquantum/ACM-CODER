#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 200000+10;

char s[MAXN];//文本串(末尾加0,前面字符>0)
int sa[MAXN], t[MAXN], t2[MAXN], c[MAXN], n;
/*sa[]是后缀数组(sa[0]为n无效,sa[1~n]存放字典序从小到大的后缀串i,后缀串i表示s[i]~s[(strlen(s)-1)]的串); 
t[],t2[]是辅助空间,c[]是桶排序的数组桶
n是文本串长度(加完字符后)*/
void bulid_sa(int m) //m是出现字符的范围+1(也就是最大的那个字符大小+1) O(nlog(n))
{
	int *x = t, *y = t2, p;//这样交换t1[],t2[]只需要更换指针
						   //第一轮基数排序,如果m很大可改为sort(快排)
	memset(c,0,sizeof(int)*(m));//初始化c[0]~c[m-1]为0
	rep(i,0,n) c[x[i] = s[i]]++;
	rep(i,1,m) c[i] += c[i-1];
	per(i,n-1,0) sa[--c[x[i]]] = i;
	for(int k = 1; k <= n; k <<= 1, m = p)
	{
		p = 0;
		//直接利用sa[]排序第二关键字
		rep(i,n-k,n) y[p++] = i;
		rep(i,0,n) if(sa[i] >= k) y[p++] = sa[i]-k;
		//基数排序第一关键字
		memset(c,0,sizeof(int)*m);
		rep(i,0,n) c[x[y[i]]]++;
		rep(i,1,m) c[i] += c[i-1];
		per(i,n-1,0) sa[--c[x[y[i]]]] = y[i];
		//根据sa和y数组计算新的x数组
		swap(x,y);
		p = 1;x[sa[0]] = 0;
		rep(i,1,n) x[sa[i]] = y[sa[i-1]] == y[sa[i]] && y[sa[i-1]+k] == y[sa[i]+k]?p-1:p++;
		if(p >= n) break;//p是rank(y)值不相同的数量,p>=n说明排序编号都不同了，不需要继续排下去
	}
}

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	gets(s);
	n = strlen(s);
	rep(i,0,n) s[i+n] = s[i];
	n <<= 1;
	bulid_sa(257);
	int m = n>>1;
	rep(i,0,n)
	{
		int st = sa[i]%m;
		if(sa[i] < m)
			putchar(s[(st-1+m)%m]);
	}
	putchar('\n');
	return 0;
}
