#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = (1e5)+10;
struct NODE{
	int op,x;
}in[MAXN];
int a[MAXN],num[MAXN],n;

int sum[MAXN<<1];
inline int id(int x, int y){return x+y|x!=y;}
void update(int x, int y, int p, int v)
{
	if(x == y)
	{
		sum[id(x,y)] += v;
		//if(sum[id(x,y)] < 0) sum[id(x,y)] = 0;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m) update(x,m,p,v);
	else update(m+1,y,p,v);
	sum[id(x,y)] = sum[id(x,m)]+sum[id(m+1,y)];
}
int find_rk(int x, int y, int v, int &ans)
{
	if(x == y)
	{
		ans += sum[id(x,y)];
		return num[x];
	}
	int m = (x+y)>>1;
	if(v <= m) return find_rk(x,m,v,ans);
	else
	{
		ans += sum[id(x,m)];
		return find_rk(m+1,y,v,ans);
	}
}
int find_k(int x, int y, int k)
{
	if(x == y) return x;
	int m = (x+y)>>1, d = sum[id(x,m)];
	if(k <= d) return find_k(x,m,k);
	return find_k(m+1,y,k-d);
}

inline int mhash(int v){return lower_bound(num,num+n,v)-num;}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int q,cnt = 0;
	scanf("%d", &q);
	rep(i,0,q)
	{
		scanf("%d%d", &in[i].op, &in[i].x);
		if(4 != in[i].op)
			num[cnt++] = in[i].x;
	}
	num[cnt++] = -INF;num[cnt++] = INF;
	sort(num,num+cnt);
	n = unique(num,num+cnt)-num;
	rep(i,0,q)
	{
		if(1 == in[i].op) update(0,n-1,mhash(in[i].x),1);
		else if(2 == in[i].op) update(0,n-1,mhash(in[i].x),-1);
		else if(3 == in[i].op)
		{
			int ans = 0;
			find_rk(0,n-1,mhash(in[i].x)-1,ans);
			printf("%d\n", ans+1);
		}
		else if(4 == in[i].op) printf("%d\n", num[find_k(0,n-1,in[i].x)]);
		else if(5 == in[i].op)
		{
			int ans = 0;
			find_rk(0,n-1,mhash(in[i].x)-1,ans);
			printf("%d\n", num[find_k(0,n-1,ans)]);
		}
		else
		{
			int ans = 0;
			int v = find_rk(0,n-1,mhash(in[i].x),ans);
			printf("%d\n", num[find_k(0,n-1,ans+1)]);
		}
	}
	return 0;
}
