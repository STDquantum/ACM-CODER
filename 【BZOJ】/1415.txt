#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10, MAXM = 1000*2+10;
int head[MAXN], tol, nxt[MAXM],to[MAXM], du[MAXN];
int p[MAXN][MAXN], st,ed,n,m;
double dp[MAXN][MAXN];
bool vis[MAXN][MAXN];

inline void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
int dis[MAXN], pre[MAXN];
void bfs(int s)
{
	queue<int> q;
	clc(dis,-1);
	q.push(s);
	dis[s] = 0;
	while(!q.empty())
	{
		int u = q.front();q.pop();
		for(int i = head[u]; ~i;i = nxt[i])
		{
			int v = to[i];
			if(-1 == dis[v])
			{
				dis[v] = dis[u]+1;
				pre[v] = u;
				q.push(v);
			}
			else if(dis[u]+1 == dis[v] && u < pre[v])
				pre[v] = u;
		}
	}
	repe(i,1,n)
	{
		if(i != s)
			p[i][s] = pre[i];
		else p[s][s] = s;
	}
}
double dfs(int x, int y)
{
	if(vis[x][y]) return dp[x][y];
	vis[x][y] = true;
	double &ans = dp[x][y];
	if(x == y) return ans = 0;
	if(p[p[x][y]][y] == y || p[x][y] == y) return ans = 1;
	ans = dfs(p[p[x][y]][y],y);
	for(int i = head[y]; ~i; i = nxt[i])
	{
		int v = to[i];
		ans += dfs(p[p[x][y]][y],v);
	}
	return ans = ans/(du[y]+1)+1;
}

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	while(~scanf("%d %d%*c", &n, &m))
	{
		scanf("%d %d%*c", &st, &ed);
		clc(head,-1);
		tol = 0;
		clc(du,0);
		rep(i,0,m)
		{
			int u,v;
			scanf("%d %d%*c", &u, &v);
			add_edge(u,v);
			add_edge(v,u);
			du[u]++, du[v]++;
		}
		repe(i,1,n) bfs(i);
		clc(vis,0);
		printf("%.3f\n", dfs(st,ed));
	}
	return 0;
}
