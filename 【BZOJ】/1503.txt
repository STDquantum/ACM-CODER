#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 300000+10, MX = 300000;

int sum[MAXN<<1],clear[MAXN<<1];
inline int id(int x, int y){return x+y|x!=y;}
inline void push_up(int x, int y, int m)
{
	sum[id(x,y)] = sum[id(x,m)]+sum[id(m+1,y)];
}
inline void down(int x, int y)
{
	int u = id(x,y);
	sum[u] = 0;
	clear[u] = 1;
}
inline void push_down(int x, int y, int m)
{
	int u = id(x,y);
	if(clear[u])
	{
		down(x,m);
		down(m+1,y);
		clear[u] = 0;
	}
}
void add(int x, int y, int p)
{
	if(x == y)
	{
		sum[id(x,y)]++;
		return;
	}
	int m = (x+y)>>1;
	push_down(x,y,m);
	if(p <= m) add(x,m,p);
	else add(m+1,y,p);
	push_up(x,y,m);
}
void cler(int x, int y, int ql, int qr)
{
	if(ql <= x && y <= qr)
	{
		down(x,y);
		return;
	}
	int m = (x+y)>>1;
	push_down(x,y,m);
	if(ql <= m) cler(x,m,ql,qr);
	if(qr > m) cler(m+1,y,ql,qr);
	push_up(x,y,m);
}
int query(int x, int y, int k)
{
	if(x == y) return x;
	int m = (x+y)>>1;
	push_down(x,y,m);
	if(sum[id(m+1,y)] >= k) return query(m+1,y,k);
	return query(x,m,k-sum[id(m+1,y)]);
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
	//freopen("d:\\out.txt", "w", stdout);
#endif
	int q,mi;
	while(~scanf("%d %d", &q, &mi))
	{
		int py = 0,del = 0, rt = id(0,MX);
		clc(sum,0);
		clc(clear,0);
		while(q--)
		{
			char op[10];
			int v;
			scanf("%s %d", op,&v);
			if('I' == op[0])
			{
				if(v >= mi)
					add(0,MX,v-py+100000);
			}
			else if('A' == op[0]) py += v;
			else if('S' == op[0])
			{
				py -= v;
				int tmp = -py+mi-1;
				int la = sum[rt];
				cler(0,MX,0,tmp+100000);
				del += la-sum[rt];
			}
			else
			{
				if(v > sum[rt]) puts("-1");
				else
				{
					int ans = query(0,MX,v)+py-100000;
					printf("%d\n", ans);
				}
			}
		}
		printf("%d\n", del);
	}
	return 0;
}
