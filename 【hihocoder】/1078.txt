#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10;
int sum[MAXN<<1],set[MAXN<<1];

inline int id(int x, int y){
	return x+y|x!=y;
}
inline void push_up(int x, int y, int m)
{
	sum[id(x,y)] = sum[id(x,m)]+sum[id(m+1,y)];
}
void bulid(int x, int y)
{
	if(x == y) return;
	int m = (x+y)>>1;
	bulid(x,m);
	bulid(m+1,y);
	push_up(x,y,m);
}
void push_down(int x, int y, int m)
{
	int u = id(x,y);
	if(~set[u])
	{
		int l = id(x,m), r = id(m+1,y);
		set[l] = set[u], set[r] = set[u];
		sum[l] = (m-x+1)*set[u], sum[r] = (y-m)*set[u];
		set[u] = -1;
	}
}
void update(int x, int y, int ql, int qr, int v)
{
	if(ql <= x && y <= qr)
	{
		sum[id(x,y)] = (y-x+1)*v;
		set[id(x,y)] = v;
		return;
	}
	int m = (x+y)>>1;
	push_down(x,y,m);
	if(ql <= m) update(x,m,ql,qr,v);
	if(qr > m) update(m+1,y,ql,qr,v);
	push_up(x,y,m);
}
int query(int x, int y, int ql, int qr)
{
	if(ql <= x && y <= qr) return sum[id(x,y)];
	int m = (x+y)>>1, ans = 0;
	push_down(x,y,m);
	if(ql <= m) ans += query(x,m,ql,qr);
	if(qr > m) ans += query(m+1,y,ql,qr);
	push_up(x,y,m);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n;
	scanf("%d%*c", &n);
	repe(i,1,n) scanf("%d%*c", &sum[id(i,i)]);
	clc(set,-1);
	bulid(1,n);
	int q;
	scanf("%d%*c", &q);
	while(q--)
	{
		int op,x,y;
		scanf("%d %d %d%*c", &op, &x, &y);
		if(op)
		{
			int v;
			scanf("%d%*c", &v);
			update(1,n,x,y,v);
		}
		else printf("%d\n", query(1,n,x,y));
	}
	return 0;
}
