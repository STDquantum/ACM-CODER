#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100, M = 2097151+10;
int dp[M];//dp[s]表示数i在哪个位置时的状态s下到排完序最少几步

inline int get_hash(int *num, int len)//压缩,1~7,为了避免都为0时不同位数hash值冲突
{
	int ans = 0;
	rep(i,0,len) ans = ans*8+num[i];
	return ans;
}
void get_num(int s, int *num, int &len)//解码
{
	len = 0;
	while(s)
	{
		num[len++] = s%8;
		s /= 8;
	}
	for(int i = 0, j = len-1; i < j; i++ ,j--) swap(num[i],num[j]);
}
int tmp[MAXN];
queue<int> q;
void bfs(int st, int n)
{
	while(!q.empty()) q.pop();
	q.push(st);
	dp[st] = 0;
	int mi[MAXN];//每个位置最上面的数
	while(!q.empty())
	{
		int now = q.front();q.pop();
		int len;
		get_num(now,tmp,len);
		clc(mi,0x3f);
		rep(i,0,len) mi[tmp[i]] = min(mi[tmp[i]],i);
		repe(i,1,n)
		{
			int l = i-1, r = i+1;
			if(mi[i] == INF) continue;
			int buf = tmp[mi[i]];
			if(l >= 1 && mi[i] < mi[l])
			{
				tmp[mi[i]] = l;
				int v = get_hash(tmp,len);
				if(-1 == dp[v])
				{
					dp[v] = dp[now]+1;
					q.push(v);
				}
				tmp[mi[i]] = buf;
			}
			if(r <= n && mi[i] < mi[r])
			{
				tmp[mi[i]] = r;
				int v = get_hash(tmp,len);
				if(-1 == dp[v])
				{
					dp[v] = dp[now]+1;
					q.push(v);
				}
				tmp[mi[i]] = buf;
			}
		}
	}
}

int a[MAXN];
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int buf[MAXN]={1,2,3,4,5,6,7};
	clc(dp,-1);
	repe(i,1,7) bfs(get_hash(buf,i),i);
	int t;
	scanf("%d", &t);
	while(t--)
	{
		int n;
		scanf("%d", &n);
		rep(i,0,n) scanf("%d", &a[i]),tmp[i] = a[i];
		sort(tmp,tmp+n); 
		rep(i,0,n) buf[lower_bound(tmp,tmp+n,a[i])-tmp] = i+1;
		printf("%d\n",dp[get_hash(buf,n)]);
	}
	return 0;
}
