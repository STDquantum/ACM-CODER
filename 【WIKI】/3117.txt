#include<cstdio>
#include<cstring>
#include<string>
#include<vector>
#define max(a,b) (a>b?a:b)
using namespace std;

struct BigInteger {
  static const int BASE = 1000;//每一个s[i]保存的最大整数
  static const int WIDTH = 3;//每一个s[i]的最大位数
  vector<int> s;
  BigInteger operator = (const string& ch) // 重新定义'='赋值运算符
  {
    s.clear();
	string str = ch;
	while(str.size() > 1 && '0' == str[0]) str.erase(str.begin());//删除前面的0
    int x, len = (str.length() - 1) / WIDTH + 1;
    for(int i = 0; i < len; i++) 
	{
      int end = str.length() - i*WIDTH;
      int start = max(0, end - WIDTH);
      sscanf(str.substr(start, end-start).c_str(), "%d", &x);
      s.push_back(x);
    }
    return *this;
  }
  //重新定义乘法
  BigInteger operator * (const BigInteger& b) const 
  {
    BigInteger c;
    c.s.clear();
	int ans[25000/WIDTH] = {0};
	for (int i = 0; i < s.size(); i++)
	{
		for (int j = 0;  j < b.s.size(); j++)
			ans[i+j] += s[i]*b.s[j];
	}
	for (int i = 0, g = 0; ; i++)
	{
		if (!g && i >= s.size()+b.s.size()) break;
		c.s.push_back((ans[i]+g)%BASE);
		g = (ans[i]+g)/BASE;
	}
	while(!c.s[c.s.size()-1] && c.s.size() > 1) c.s.pop_back();
    return c;
  }
};

BigInteger in()
{
	char c[510];
	scanf("%s%*c", c);
	BigInteger ans;
	ans = c;
	return ans;
}
void out(BigInteger a)
{
	printf("%d", a.s.back());
	for (int i = a.s.size() - 2; i >= 0; i--)
	{
		char buf[20];
		sprintf(buf, "%03d", a.s[i]);
		for (int j = 0; j < strlen(buf); j++) putchar(buf[j]);
	}
	putchar('\n');
}
int main() {
#ifdef SHY
	freopen("e:\\1.txt","r",stdin);
#endif
  BigInteger a = in(), b = in();
  out(a*b);
  return 0;
}
