#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 20, MOD = 2520;
unordered_map<int,int> vis,nm;
LL dp[MAXN][MOD][50];
int bit[MAXN],tol;

int gcd(int a, int b)
{
	while(b){
		a %= b;
		if(a < b) swap(a,b);
	}
	return a;
}
int lcm(int a, int b){
	return a/gcd(a,b)*b;
}
int get_id(int num)
{
	if(vis.find(num) == vis.end())
	{
		vis[num] = tol++;
		nm[tol-1] = num;
		return tol-1;
	}
	return vis[num];
}
LL dfs(int len, int m, int l, bool ismax)
{
	if(!len) return 0 == m%nm[l];
	LL &ans = dp[len][m][l];
	if(!ismax && ~ans) return ans;
	LL sum = 0;
	int mx = ismax?bit[len]:9;
	repe(i,0,mx)
	{
		int nx = l;
		if(i) nx = get_id(lcm(nm[l],i));
		sum += dfs(len-1,(m*10+i)%MOD,nx,ismax&&i==mx);
	}
	return ismax?sum:ans=sum;
}
LL sloved(LL n)
{
	int len = 0;
	while(n)
	{
		bit[++len] = n%10;
		n /= 10;
	}
	return dfs(len,0,0,1);
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	tol = 0;
	get_id(1);
	clc(dp,-1);
	while(t--)
	{
		LL x,y;
		scanf("%I64d %I64d", &x, &y);
		printf("%I64d\n", sloved(y)-sloved(x-1));
	}
	return 0;
}
