#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 20+10;
int dp[1<<20];//dp[s]表示每一行状态为s(1-满足条件)时最小花费
int a[MAXN][MAXN],cost[MAXN][MAXN], to[MAXN][MAXN];
char s[MAXN][MAXN];

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n,m;
	while(~scanf("%d %d%*c", &n, &m))
	{
		rep(i,0,n) scanf("%s", s[i]);
		rep(i,0,n)
		{
			rep(j,0,m) scanf("%d%*c", &a[i][j]);
		}
		clc(to,0);
		rep(j,0,m)
		{
			rep(i,0,n)
			{
				int mx = 0, sum = 0;
				rep(k,0,n)
				{
					if(s[i][j] == s[k][j])
					{
						to[i][j] |= 1<<k;
						mx = max(mx,a[k][j]);
						sum += a[k][j];
					}
				}
				cost[i][j] = sum-mx;
			}
		}
		clc(dp,0x3f);
		dp[0] = 0;
		int ALL = (1<<n)-1;
		rep(s,0,ALL)
		{
			if(INF == dp[s]) continue;
			rep(i,0,n)
			{
				if(0 == (s&(1<<i)))
				{
					rep(j,0,m)
					{
						dp[s|(1<<i)] = min(dp[s|(1<<i)], dp[s]+a[i][j]);
						dp[s|to[i][j]] = min(dp[s|to[i][j]], dp[s]+cost[i][j]);
					}
					break;
				}
			}
		}
		printf("%d\n", dp[ALL]);
	}
	return 0;
}
