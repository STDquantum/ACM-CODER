#include <cstdio>
#include <cstring>
#include <cmath>
#include <string>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
typedef long long LL;
#define MAXN 110
struct Edge{
	int from, to, cost;
	Edge(int a, int b, int c){from = a, to = b, cost = c;}
};
vector<Edge> edge;
vector<int> g[MAXN];
int dp[MAXN][MAXN][MAXN], v[MAXN], lv[MAXN], m;

void add_edge(int from ,int to, int cost)
{
	edge.push_back(Edge(from, to, cost));
	g[from].push_back(edge.size()-1);
}
int dfs(int u, int mi, int mx)
{
	int& ans = dp[u][mi][mx];
	if(~ans) return ans;
	ans = v[u];
	int sz = g[u].size();
	rep(i,0,sz)
	{
		Edge& e = edge[g[u][i]];
		if(max(mx,lv[e.to]) - min(mi,lv[e.to]) <= m)
			ans = min(ans,dfs(e.to,min(mi,lv[e.to]),max(mx,lv[e.to]))+e.cost);
	}
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt","r",stdin);
#endif
	int n;
	while(~scanf("%d %d%*c", &m, &n) && n+m)
	{
		int len, b, c;
		scanf("%d %d %d%*c", &v[1], &lv[1], &len);
		edge.size();
		repe(i,1,n) g[i].clear();
		rep(i,0,len)
		{
			scanf("%d %d%*c", &b, &c);
			add_edge(1,b,c);
		}
		repe(i,2,n)
		{
			scanf("%d %d %d%*c", &v[i], &lv[i], &len);
			rep(j,0,len)
			{
				scanf("%d %d%*c", &b, &c);
				add_edge(i,b,c);
			}
		}
		clc(dp,-1);
		printf("%d\n", dfs(1,lv[1],lv[1]));
	}
	return 0;
}