#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 10000+100;
int f[MAXN], n;
struct Edge{
	int u,v;
	Edge(int a, int b){
		u = a; v = b;
	}
};
vector<Edge> edge;
map<int,int> vis;
int in[MAXN];

int get_id(int u)
{
	if(vis.count(u)) return vis[u];
	vis[u] = n++;
	return n-1;
}
int find(int x){return x == f[x]?x:f[x]=find(f[x]);}
bool sloved()
{
	int cnt = n, sz = edge.size();
	rep(i,0,n) f[i] = i;
	rep(i,0,sz)
	{
		int x = find(edge[i].u), y = find(edge[i].v);
		if(x != y) cnt--, f[x] = y;
		else return false;
		if(1 == cnt) break;
	}
	return 1 == cnt;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int a,b, count = 0;
	while(~scanf("%d %d%*c", &a, &b))
	{
		if(-1 == a && -1 == b) break;
		if(0 == a+b)
		{
			printf("Case %d is a tree.\n", ++count);
			continue;
		}
		clc(in,0);
		n = 0;
		edge.clear();
		vis.clear();
		bool ok = true;
		int x = get_id(a), y = get_id(b);
		edge.push_back(Edge(x,y));
		if(++in[y] > 1) ok = false;
		while(~scanf("%d %d%*c", &a, &b) && a+b)
		{
			int x = get_id(a), y = get_id(b);
			edge.push_back(Edge(x,y));
			if(++in[y] > 1) ok = false;
		}
		int sum = 0;
		rep(i,0,n) if(in[i]) sum++;
		if(sum == n-1 && ok && sloved()) printf("Case %d is a tree.\n", ++count);
		else printf("Case %d is not a tree.\n", ++count);
	}
	return 0;
}
