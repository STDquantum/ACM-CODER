 
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define MAXN 210
typedef long long LL;
struct Edge{
    int from, to, cap;
    Edge(int a, int b, int c){from  = a, to = b, cap = c;}
};
vector<Edge> edge;
vector<int> g[MAXN];
int n, s,t,d[MAXN], num[MAXN];

void init()
{
    edge.clear();
    repe(i,1,n) g[i].clear();
    clc(num,0);
    clc(d,0);
}
void add_edge(int from ,int to, int cap)
{
    edge.push_back(Edge(from,to,cap));
    edge.push_back(Edge(to,from,0));
    int m = edge.size();
    g[from].push_back(m-2);
    g[to].push_back(m-1);
}
int dfs(int x, int a)
{
    if(x == t) return a;
    int delta, mi = n-1, ans = 0, sz = g[x].size();
    rep(i,0,sz)
    {
        int id = g[x][i];
        Edge& e = edge[id];
        if(!e.cap) continue;
        if(d[e.to]+1 == d[x])
        {
            delta = dfs(e.to, min(a, e.cap));
            if(delta)
            {
                e.cap -= delta;
                edge[id^1].cap += delta;
                ans += delta;
                a -= delta;
            }
            else if(d[s] >= n || !a) return ans;
        }
        mi = min(mi, d[edge[id].to]);
    }
    if(!ans)
    {
        if(!--num[d[x]])
        {
            d[s] = n;
            return 0;
        }
        num[d[x] = mi+1]++;
    }
    return ans;
}
int maxflow()
{
    int flow = 0;
    num[0] = n;
    while(d[s] < n) flow += dfs(s,INF);
    return flow;
}
int main()
{
#ifdef SHY
    freopen("e:\\1.txt", "r", stdin);
#endif
    int m;
    s = 1;
    while(~scanf("%d %d%*c", &m,&n))
    {
        int a,b,c;
        t = n;
        init();
        rep(i,0,m)
        {
            scanf("%d %d %d%*c", &a, &b, &c);
            add_edge(a,b,c);
        }
        printf("%d\n", maxflow());
    }
    return 0;
}
        