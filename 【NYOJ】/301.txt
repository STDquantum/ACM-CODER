/*
构造矩阵
X
{0 a 0
 1 b 0
 0 1 1}
使得{f(x-2),f(x-1),c} * X = {f(x-1),a*f(x-2)+b*f(x-1)+c, c} == {f(x-1),f(x),c}
{f(1),f(2),c}乘上N-1次X后就可得出{f(n),f(n+1),c}  f(n)就是最终答案
也就{f(1),f(2),c} * X^n-1 = {f(n),f(n+1),c};
*/
#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
typedef long long LL;
#define MOD 1000007
struct MATRIX{//矩阵
	LL num[3][3];
	MATRIX(LL a1,LL a2,LL a3, LL b1, LL b2, LL b3, LL c1, LL c2, LL c3)
	{
		num[0][0] = a1, num[0][1] = a2, num[0][2] = a3;
		num[1][0] = b1, num[1][1] = b2, num[1][2] = b3;
		num[2][0] = c1, num[2][1] = c2, num[2][2] = c3;
	}
};

MATRIX mul(const MATRIX& a, const MATRIX& b)//矩阵a*b
{
	MATRIX ans=MATRIX(0,0,0,0,0,0,0,0,0);
	rep(i,0,3)
	{
		rep(j,0,3)
		{
			rep(k,0,3)
				ans.num[i][j] = (ans.num[i][j]+(a.num[i][k]*b.num[k][j]%MOD+MOD)%MOD)%MOD;
		}
	}
	return ans;
}
MATRIX pow_mod(MATRIX x, int n)//快速幂
{
	MATRIX ans = MATRIX(1,0,0,0,1,0,0,0,1);//任何3*3矩阵乘以这个单位矩阵不会改变值
	while(n)
	{
		if(n&1) ans = mul(ans,x);
		x = mul(x,x);
		n >>= 1;
	}
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int f1,f2,a,b,c,n;
		scanf("%d %d %d %d %d %d%*c", &f1, &f2, &a, &b, &c, &n);
		MATRIX x = MATRIX(0,a,0,1,b,0,0,1,1);//构造出的矩阵
		x = pow_mod(x,n-1);
		int ans = ((f1*x.num[0][0]%MOD+MOD)%MOD+(f2*x.num[1][0]%MOD+MOD)%MOD+(c*x.num[2][0]%MOD+MOD)%MOD)%MOD;
		//只要求出[0][0]即可
		printf("%d\n", ans);
	}
	return 0;
}
