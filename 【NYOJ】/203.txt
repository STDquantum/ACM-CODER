#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <map>
#include <queue>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define MAXN 110
#define MAXC 1000010
#define INF 0x3f3f3f3f
struct Edge{
	int from, to, cost;
	Edge(int a, int b, int c){from = a, to = b, cost = c;}
};
struct NODE{
	int dis,u;
	NODE(int a, int b){dis = a, u = b;}
	bool operator<(const NODE& t) const {return dis > t.dis;}
};
vector<int> g[MAXN];
vector<Edge> edge;
int dis[MAXN], v[MAXN], dp[MAXC];
bool vis[MAXN];

void add_edge(int a, int b, int c)
{
	edge.push_back(Edge(a,b,c));
	g[a].push_back(edge.size()-1);
}
void dijkstra(int s)
{
	priority_queue<NODE> q;
	clc(dis,0x3f);
	clc(vis,0);
	dis[s] = 0;
	q.push(NODE(0,s));
	while(!q.empty())
	{
		NODE buf = q.top();q.pop();
		if(vis[buf.u]) continue;
		vis[buf.u] = true;
		int sz = g[buf.u].size();
		rep(i,0,sz)
		{
			Edge& e = edge[g[buf.u][i]];
			if(dis[e.to] > dis[buf.u]+e.cost)
			{
				dis[e.to] = dis[buf.u]+e.cost;
				q.push(NODE(dis[e.to], e.to));
			}
		}
	}
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int s,n,m,a,b,c;
		scanf("%d %d %d%*c", &s, &n, &m);
		repe(i,0,n) g[i].clear();
		edge.clear();
		rep(i,0,m)
		{
			scanf("%d %d %d%*c", &a, &b, &c);
			add_edge(a,b,c);
			add_edge(b,a,c);
		}
		dijkstra(0);
		repe(i,1,n) scanf("%d%*c", &v[i]);
		clc(dp,0);
		repe(i,1,n)
		{
			per(j,s,dis[i])
				dp[j] = max(dp[j], dp[j-dis[i]]+v[i]);
		}
		printf("%d\n", dp[s]);
	}
	return 0;
}