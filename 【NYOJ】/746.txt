#include <cstdio>
#include <cstring>
#define MAXN 19
#define max(a,b) (a>b?a:b)
typedef long long LL;
LL w[19], n, dp[MAXN][MAXN][MAXN], num[MAXN][MAXN];
//dp[i][j][k]：i~j划分成k段的最大乘积

LL dfs(int l, int r, int m)
{
	LL& ans = dp[l][r][m];
	if (-1 != ans) return ans;
	if (1 == m || l >= r) return ans = num[l][r];
	ans = 0;
	for (int i = m+l-2; i < r; i++)//m+l-2是防止不合法的状态被计算
		ans = max(ans,dfs(l,i,m-1)*num[i+1][r]);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt","r",stdin);
#endif
	int t;
	for (int i = 0; i < 19; i++)
	{
		w[i] = 1;
		for (int j = 0; j < i; j++)
			w[i] *= 10;
	}
	scanf("%d%*c", &t);
	while(t--)
	{
		int m, sum = 0;
		memset(dp,-1,sizeof(dp));
		scanf("%lld %d%*c", &n, &m);
		LL buf = n;
		while(buf)
		{
			sum++;
			buf /= 10;
		}
		for (int i = 0; i < sum; i++)
		{
			for (int j = i; j < sum; j++)
				num[i][j] = n/w[i]%w[j-i+1];
		}
		printf("%lld\n",dfs(0,sum-1,m));
	}
	return 0;
}
===========================================================================================
#include <cstdio>
#include <cstring>
#define MAXN 19
#define max(a,b) (a>b?a:b)
typedef long long LL;
LL w[19], n, dp[MAXN][MAXN], num[MAXN][MAXN];
//dp[i][j]：0~i之间划分成j段的最大乘积

LL dfs(int r, int m)
{
	LL& ans = dp[r][m];
	if (-1 != ans) return ans;
	if (1 == m) return ans = num[0][r];
	ans = 0;
	for (int i = 0; i < r; i++)
		ans = max(ans,dfs(i,m-1)*num[i+1][r]);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt","r",stdin);
#endif
	int t;
	for (int i = 0; i < 19; i++)
	{
		w[i] = 1;
		for (int j = 0; j < i; j++)
			w[i] *= 10;
	}
	scanf("%d%*c", &t);
	while(t--)
	{
		int m, sum = 0;
		memset(dp,-1,sizeof(dp));
		scanf("%lld %d%*c", &n, &m);
		LL buf = n;
		while(buf)
		{
			sum++;
			buf /= 10;
		}
		for (int i = 0; i < sum; i++)
		{
			for (int j = i; j < sum; j++)
				num[i][j] = n/w[i]%w[j-i+1];
		}
		printf("%lld\n",dfs(sum-1,m));
	}
	return 0;
}