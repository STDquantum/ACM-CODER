#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10;
struct P{
	int x,y;
	bool operator<(const P&t)const{
		if(x != t.x) return x < t.x;
		return y < t.y;
	}
}p[MAXN];
int n;

bool find(P a, P b)
{
	if(a.x&1 || a.y&1 || b.x&1 || b.y&1) return false;
	a.x >>= 1, a.y >>= 1, b.x >>= 1, b.y >>= 1;
	return binary_search(p,p+n,a) && binary_search(p,p+n,b);
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	while(~scanf("%d%*c", &n) && n)
	{
		rep(i,0,n)
			scanf("%d %d%*c", &p[i].x, &p[i].y);
		sort(p,p+n);
		int ans = 0;
		P a,b;
		rep(i,0,n)
		{
			rep(j,i+1,n)
			{
				a.x = p[i].x+p[j].x+p[j].y-p[i].y, a.y = p[i].y+p[j].y+p[i].x-p[j].x;
				b.x = p[i].x+p[j].x-p[j].y+p[i].y, b.y = p[i].y+p[j].y-p[i].x+p[j].x;
				ans += find(a,b);
			}
		}
		printf("%d\n", ans>>1);
	}
	return 0;
}
