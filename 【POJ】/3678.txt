#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10, MAXM = 1000000*4*2+10;
struct Twosat{
	int head[MAXN<<1], tol, next[MAXM], to[MAXM];
	void init(){
		clc(head,-1);
		tol = 0;
	}
	void add_edge(int u, int v)
	{
		next[tol] = head[u], to[tol] = v;
		head[u] = tol++;
	}
	void add_clause(int x, int xv, int y, int yv)
	{
		x = (x<<1)+xv, y = (y<<1)+yv;
		add_edge(x,y^1);
		add_edge(y,x^1);
	}
	bool vis[MAXN<<1];
	int s[MAXN<<1], c;
	bool dfs(int u)
	{
		if(vis[u^1]) return false;
		if(vis[u]) return true;
		vis[u] = true;
		s[c++] = u;
		for(int i = head[u]; ~i; i = next[i])
			if(!dfs(to[i])) return false;
		return true;
	}
	bool sloved(int n)
	{
		clc(vis,0);
		for(int i = 0; i < n<<1; i += 2)
		{
			if(!vis[i] && !vis[i^1])
			{
				c = 0;
				if(!dfs(i))
				{
					while(c) vis[s[--c]] = false;
					if(!dfs(i^1)) return false;
				}
			}
		}
		return true;
	}
}ts;

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n,m;
	while(~scanf("%d %d%*c", &n, &m))
	{
		ts.init();
		char op[10];
		while(m--)
		{
			int a,b,c;
			scanf("%d %d %d %s%*c", &a, &b, &c, op);
			if('A' == op[0])
			{
				rep(i,0,2)
				{
					rep(j,0,2)
					{
						if((i&j) != c)
							ts.add_clause(a,i,b,j);
					}
				}
			}
			else if('O' == op[0])
			{
				rep(i,0,2)
				{
					rep(j,0,2)
					{
						if((i|j) != c)
							ts.add_clause(a,i,b,j);
					}
				}
			}
			else
			{
				rep(i,0,2)
				{
					rep(j,0,2)
					{
						if((i^j) != c)
							ts.add_clause(a,i,b,j);
					}
				}
			}
		}
		if(ts.sloved(n)) puts("YES");
		else puts("NO");
	}
	return 0;
}
