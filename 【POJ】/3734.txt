#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <bitset>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f,MOD = 10007,MAXN = 1<<4;
struct MATRIX{
	int num[MAXN][MAXN];
	MATRIX(){
		clc(num,0);
	}
	MATRIX operator*(const MATRIX &b){
		MATRIX ans;
		rep(i,0,MAXN)
		{
			rep(j,0,MAXN)
			{
				rep(k,0,MAXN)
				{
					ans.num[i][j] += num[i][k]*b.num[k][j];
				}
				ans.num[i][j] %= MOD;
			}
		}
		return ans;
	}
};

MATRIX pow_mod(MATRIX& x, int n)
{
	MATRIX ans;
	rep(i,0,MAXN) ans.num[i][i] = 1;
	while(n)
	{
		if(n&1) ans = ans*x;
		x = x*x;
		n >>= 1;
	}
	return ans;
}
int d[MAXN],st[MAXN];

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	st[0] = 1;
	while(t--)
	{
		int n,all = 1<<4;
		scanf("%d", &n);
		MATRIX x;//构造转移矩阵
		rep(j,0,all)
		{
			rep(k,0,4)
				x.num[j][j^(1<<k)]=1;
		}
		x = pow_mod(x,n);
		clc(d,0);//计算st*(x^n)
		rep(i,0,MAXN)
		{
			rep(j,0,MAXN)
			{
				d[i] += st[j]*x.num[j][i];
			}
			d[i] %= MOD;
		}
		int ans = 0;//统计最后的结果，此时d就是dp[n]
		rep(j,0,all)
		{
			if(0 == (j&(1<<0)) && 0 == (j&(1<<1)))
				ans += d[j];
		}
		printf("%d\n", ans%MOD);
	}
	return 0;
}
