#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <bitset>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 30+10, MAXM = 30+10, d[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};
int n,m,a[MAXN][MAXM],x[MAXM];

int gauss()//返回-1无解,0有一个解并存在x[],否则返回自由变元个数
{
	int row,col;
	for(row = 0,col = 0; row < n && col < m; row++,col++)
	{
		int mx = row;//找出绝对值最大的作为当前行
		rep(i,row+1,n) if(abs(a[i][col]) > abs(a[mx][col])) mx = i;
		if(mx != row)
		{
			rep(j,col,m) swap(a[mx][j],a[row][j]);
			swap(x[mx],x[row]);
		}
		if(0 == a[row][col])
		{
			row--;
			continue;//有多个解
		}
		rep(i,row+1,n)
		{
			if(0 == a[i][col]) continue;
			a[i][col] = 0;
			rep(j,col+1,m) a[i][j] ^= a[row][j];
			x[i] ^= x[row];
		}
	}
	rep(i,0,n)
	{
		bool end = true;
		rep(j,0,m)
		{
			if(a[i][j])
			{
				end = false;
				break;
			}
		}
		if(end && x[i]) return -1;//i行所有a为0，而右边值x不为0，无解
	}
	if(row < m) return m-row;//迭代次数小于未知数个数则有1<<(m-row)个解
	per(now,m-1,0)//从下往上推,利用已知求未知
	{
		rep(j,now+1,m) x[now] ^= (a[now][j]&&x[j]);
		x[now] &= a[now][now];//输出整数解可能需要(int)(x[i]+0.5)
	}
	return 0;
}

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	while(t--)
	{
		scanf("%d", &n);
		m = n;
		rep(i,0,n) scanf("%d", &x[i]);
		rep(i,0,n)
		{
			int v;
			scanf("%d", &v);
			x[i] ^= v;
		}
		int u,v;
		clc(a,0);
		while(~scanf("%d %d", &u, &v) && u+v)
		{
			a[v-1][u-1] = 1;
		}
		rep(i,0,n) a[i][i] = 1;
		int cnt = 0;
		int f = gauss();
		if(0 == f) puts("1");
		else if(-1 == f)puts("Oh,it's impossible~!!");
		else printf("%d\n", 1<<f);
	}
	return 0;
}