#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 20000+10;
struct NODE{
	LL l,r,h,v;
	bool operator<(const NODE&t) const{
		if(h != t.h)
			return h < t.h;
		return v > t.v;
	}
}p[MAXN];
LL tmp[MAXN],pos[MAXN];
LL mx[MAXN<<1], lz[MAXN<<1];

inline int id(int x, int y){return x+y|x!=y;}
inline void push_up(int x, int y, int m)
{
	mx[id(x,y)] = max(mx[id(x,m)], mx[id(m+1,y)]);
}
void push_down(int x, int y, int m)
{
	int u = id(x,y);
	if(lz[u])
	{
		int l = id(x,m), r = id(m+1,y);
		mx[l] += lz[u], mx[r] += lz[u];
		lz[l] += lz[u], lz[r] += lz[u];
		lz[u] = 0;
	}
}
void update(int x, int y, int ql, int qr, int v)
{
	if(ql <= x && y <= qr)
	{
		mx[id(x,y)] += v;
		lz[id(x,y)] += v;
		return;
	}
	int m = (x+y)>>1;
	push_down(x,y,m);
	if(ql <= m) update(x,m,ql,qr,v);
	if(qr > m) update(m+1,y,ql,qr,v);
	push_up(x,y,m);
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n;
	LL w,h;
	while(~scanf("%d %lld %lld%*c", &n, &w, &h))
	{
		rep(i,0,n)
		{
			LL x1,y1,c;
			scanf("%lld %lld %lld%*c", &x1, &y1, &c);
			LL x2 = x1+w-1, y2 = y1+h-1;//¼ÇµÃ+1
			tmp[i<<1] = x1, tmp[i<<1|1] = x2;
			p[i<<1] = {x1,x2,y1,c};
			p[i<<1|1] = {x1,x2,y2,-c};
		}
		int tol = n<<1,cnt = 1;
		sort(p,p+tol);
		sort(tmp,tmp+tol);
		pos[0] = tmp[0];
		rep(i,1,tol)
		{
			if(tmp[i] != tmp[i-1]) pos[cnt++] = tmp[i];
		}
		LL ans = 0;
		clc(mx,0);
		clc(lz,0);
		rep(i,0,tol)
		{
			int x = lower_bound(pos,pos+cnt,p[i].l)-pos, y = lower_bound(pos,pos+cnt,p[i].r)-pos;
			update(0,cnt-1,x,y,p[i].v);
			ans = max(ans, mx[id(0,cnt-1)]);
		}
		printf("%lld\n", ans);
	}
	return 0;
}
