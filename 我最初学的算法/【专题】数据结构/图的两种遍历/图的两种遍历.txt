//对这个给定图的两种遍历,我这里用邻接矩阵来储存的
#include <stdio.h>
#include <queue>
#define MAXN 13
using namespace std;

void init_theG(char *, int (*a)[MAXN]);
void dfs (char *, int (*a)[MAXN], bool *, int);
void bfs (char *, int (*a)[MAXN], bool *, int);

int main ()
{
	int a[MAXN][MAXN], i;
	char c[MAXN];
	bool visited[MAXN]={false};
	init_theG(c, a);
	for (i = 0; i < MAXN; i++)
		if (!visited[i])
			//dfs(c, a, visited, i);
			bfs(c,a,visited, i);
}

void init_theG(char *c, int (*a)[MAXN])
{
	int i, j;
	for (i = 0; i < MAXN; i++)
		for (j = 0; j < MAXN; j++)
			a[i][j] = 0;
	for (i = 0; i < MAXN;i++)
		c[i] = 'A'+i;
	a[0][1]=a[0][2]=a[0][5]=a[0][11]=a[1][0]=a[2][0]=a[5][0]=a[11][0] = 1;
	a[1][12]=a[12][1]=a[9][12]=a[12][9]=a[9][11]=a[11][9]=a[11][12]=a[12][11]=1;
	a[3][4]=a[4][3]=a[8][6]=a[6][8]=a[6][7]=a[7][6]=a[6][10]=a[10][6]=a[7][10]=a[10][7]=1;
}

void dfs (char *c, int (*a)[MAXN], bool *visited, int f)
{
	int i;
	printf ("%c ", c[f]);
	visited[f] = true;
	for (i = 0; i < MAXN; i++)
		if (a[f][i] && false == visited[i])
			dfs(c, a, visited, i);
}

void bfs (char *c, int (*a)[MAXN], bool * visited, int f)
{
	int i, p;
	queue <int> que;
	que.push(f);
	visited[f] = true;
	while (que.size())
	{
		p = que.front();
		printf ("%c ", c[p]), que.pop();
		for (i = 0; i < MAXN; i++)
			if (a[p][i] && false == visited[i])
				que.push(i), visited[i] = true;
	}
}