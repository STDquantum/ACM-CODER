发现问题的起因是HDU 1712，一个赤裸的分组背包。所以有必要说一下这个题目。

题意：
一个学生用M天的时间复习N门课程，每门课程花费不同的天数，有不同的收获。问如何安排这M天，使得收获最大。

思路：
可以将每一门课看成一个分组，每门课不同天数的选择看成是分组的物品（显然只能有一个选择），物品的费用即为花费的天数，物品的价值为题中给出的收获。该题中背包容量最大为M。
设dp[x]为前i组物品，在背包容量为x（即费用为x）时的最大价值。则将i从1到N进行过历遍后（第一重循环），dp[m]即为所求。
在这种状态设置中，容易想出以下两种阶段递推方式（以下所述都为第二和第三重循环）：
//用滚动数组必须这样，不用滚动的话都可以
1，在同一个背包容量中，对不同费用的物品进行枚举比较：

for(j=MAX;j>=1;--j)   //背包容量

      for(k=1;k<=m;++k)  //不同费用的物品

2，在同一费用的物品中，对放在不同背包容量时计算最大价值：（该方式同《背包九讲-分组背包》中的伪代码部分）

for(k=1;k<=m;++k)    //不同费用的物品

      for(j=MAX;j>=1;--j)  //背包容量


简略分析：

1，分析第一种递推方式的正确:
该方式即求在容量为j的背包中，选择哪一个物品可以有最大价值。
看递推方程：dp[j]=max(dp[j],dp[j-c[k]]+w[k]);（其中c[k]为k物品的费用，w[k]为价值），由于递降枚举背包容量，max比较中的dp[j]是由上一组物品决策所得，在这里将被忽略。因为就算不忽略，在本组物品中dp[j]的决策依然要取决于dp[j-c[k]]+w[k]。
而同样由于递降枚举背包容量（第二重循环），dp[j-c[k]]在本组物品中是未进行过决策的，亦即背包容量为j-c[k]时，在本组物品中是没有选择任何物品的，这可以保证对dp[j]决策时，不会多选本组中的物品。

2，分析第二种递推方式的错误：
该方式即求对物品k，放在所有背包中，计算各个最大价值。
同样是递推方程：dp[j]=max(dp[j],dp[j-c[k]]+w[k]);（其中c[k]为k物品的费用，w[k]为价值）。能否保证dp[j-c[k]]在本组中未经决策，就成了该递推方式对错的关键。
由于背包容量的递降枚举在第三重循环，只能保证k物品不会重复选择。对于另一k0物品，当背包容量枚举到j-c[k]的时候，由方程可以有：dp[j-c[k]]=max(dp[j-c[k]],dp[j-c[k]-c[k0]]+w[k0]，亦即dp[j-c[k]]可能在本组中的其他物品中进行过决策。
那么这样就可能导致在一组物品中选择了多件物品。


---------------------------------------------------------------------------------------------------------------
/*滚动数组*/
#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
#define MAXN 110
int dp[MAXN], a[MAXN][MAXN];

int main ()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n, m;
        while(~scanf ("%d %d%*c", &n, &m) && n+m)
	{
                for (int i = 1; i <= n; i++)
                        for (int j = 1; j <= m; j++)
				scanf ("%d%*c", &a[i][j]);
		memset(dp,0,sizeof(dp));
                for (int i = 1; i <= n; i++)//每一组
		{
                        for (int j = m; j >= 1; j--)//这个循环放外面，和01 02背包相反，确保只选择每组中的一个
                                for (int k = 1; k <= j; k++)//每组中每一个物品
                                        dp[j] = max(dp[j], dp[j-k]+a[i][k]);
		}
		printf ("%d\n", dp[m]);
	}
        return 0;
}
-----------------------------------------------------------------------------------------------------------
/*
非滚动
*/
#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
#define MAXN 110
int dp[MAXN][MAXN], a[MAXN][MAXN];

int main ()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n, m;
        while(~scanf ("%d %d%*c", &n, &m) && n+m)
	{
                for (int i = 1; i <= n; i++)
                        for (int j = 1; j <= m; j++)
				scanf ("%d%*c", &a[i][j]);
		memset(dp,0,sizeof(dp));
                for (int i = 1; i <= n; i++)//每一组
		{
			memcpy(dp[i],dp[i-1], sizeof(dp[i]));
                        for (int j = 1; j <= m; j++)//每组第j个物品
                                for (int k = m; k >= j; k--)//当前背包大小
                                        dp[i][k] = max(dp[i][k], dp[i-1][k-j]+a[i][j]);
		}
		printf ("%d\n", dp[n][m]);
	}
        return 0;
}

