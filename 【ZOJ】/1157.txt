#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define clc(a,b) memset(a,b,sizeof(a))
#define pb push_back
#define MAXN 410
#define INF 0x3f3f3f3f
struct ISAP{
	struct Edge{
		int from, to, cap, flow;
		Edge(int a, int b, int c, int d){
			from = a, to = b, cap = c, flow = d;
		}
	};
	int p[MAXN], num[MAXN], d[MAXN], cur[MAXN];
	int n,m,s,t;
	vector<int> g[MAXN];
	vector<Edge> edge;
	bool vis[MAXN];
	void init(int n)
	{
		this->n = n;
		edge.clear();
		rep(i,0,n) g[i].clear();
		clc(num,0);
		clc(cur,0);
	}
	void add_edge(int from, int to, int cap)
	{
		edge.pb(Edge(from,to,cap,0));
		edge.pb(Edge(to,from,0,0));
		m = edge.size();
		g[from].pb(m-2);
		g[to].pb(m-1);
	}
	int augment()
	{
		int x = t, a = INF;
		while(x != s)
		{
			Edge& e = edge[p[x]];
			a = min(a,e.cap-e.flow);
			x = edge[p[x]].from;
		}
		x = t;
		while(x != s)
		{
			edge[p[x]].flow += a;
			edge[p[x]^1].flow -= a;
			x = edge[p[x]].from;
		}
		return a;
	}
	bool bfs()
	{
		clc(vis,0);
		queue<int> q;
		q.push(t);
		d[t] = 0;
		vis[t] = true;
		while(!q.empty())
		{
			int x = q.front();q.pop();
			int sz = g[x].size();
			rep(i,0,sz)
			{
				Edge& e = edge[g[x][i]];
				if(vis[e.to]) continue;
				vis[e.to] = true;
				d[e.to] = d[x]+1;
				q.push(e.to);
			}
		}
		return vis[s];
	}
	int maxflow(int s,int t)
	{
		this->s = s,this->t = t;
		int flow = 0;
		bfs();
		rep(i,0,n) num[d[i]]++;
		int x = s;
		while(d[s] < n)
		{
			if(x == t)
			{
				flow += augment();
				x = s;
			}
			bool ok = false;
			int sz = g[x].size();
			rep(i,cur[x],sz)
			{
				Edge& e = edge[g[x][i]];
				if(e.cap>e.flow && d[x] == d[e.to]+1)
				{
					ok = true;
					p[e.to] = g[x][i];
					cur[x] = i;
					x = e.to;
					break;
				}
			}
			if(!ok)
			{
				int sum = n-1;
				int sz = g[x].size();
				rep(i,0,sz)
				{
					Edge& e = edge[g[x][i]];
					if(e.cap > e.flow) sum = min(sum,d[e.to]);
				}
				if(--num[d[x]] == 0) return flow;
				num[d[x] = sum+1]++;
				cur[x] = 0;
				if(x != s) x = edge[p[x]].from;
			}
		}
		return flow;
	}
}isap;
bool dp[MAXN][MAXN];
map<string, int> num;
int a[MAXN],b[MAXN];

int find(char* a)
{
	if(num.find(a) == num.end())
    {
        int sz = num.size();
		num[a] = sz;
    }
	return num[a];
}
void floyd()
{
	int n = num.size();
	rep(i,0,n) dp[i][i] = true;
	rep(k,0,n)
	{
		rep(i,0,n)
			rep(j,0,n)
				dp[i][j] = dp[i][j] || (dp[i][k] && dp[k][j]);
	}
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n,m,k;
		char ch[30],to[30];
		num.clear();
		clc(dp,0);
		scanf("%d%*c", &n);
		rep(i,0,n)
		{
			gets(ch);
			b[i] = find(ch);
		}
		scanf("%d%*c", &m);
		rep(i,0,m)
		{
			scanf("%*s %s", ch);
			a[i] = find(ch);
		}
		scanf("%d%*c", &k);
		rep(i,0,k)
		{
			scanf("%s %s%*c", &ch, &to);
			dp[find(ch)][find(to)] = true;
		}
		floyd();
		int len = num.size(), st = len, ed = len+1;
		isap.init(len+2);
		rep(i,0,m) isap.add_edge(st,a[i],1);
		rep(i,0,n) isap.add_edge(b[i],ed,1);
		rep(i,0,m)
		{
			rep(j,0,n)
			{
				if(dp[a[i]][b[j]])
					isap.add_edge(a[i],b[j],INF);
			}
		}
		printf("%d\n", m-isap.maxflow(st,ed));
		if(t) putchar('\n');
	}
	return 0;
}
