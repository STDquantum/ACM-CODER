#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 200+10, MAXM = MAXN*2*MAXN*2*2+10;
struct Twosat{
	int head[MAXN<<1], tol, next[MAXM],to[MAXM];
	void init()
	{
		clc(head,-1);
		tol = 0;
	}
	void add_edge(int u, int v)
	{
		next[tol] = head[u]; to[tol] = v;
		head[u] = tol++;
	}
	void add_clause(int x, int xv, int y, int yv)
	{
		x = (x<<1)+xv, y = (y<<1)+yv;
		add_edge(x,y^1);
		add_edge(y,x^1);
	}
	bool vis[MAXN<<1];
	int s[MAXN<<1], c;
	bool dfs(int u)
	{
		if(vis[u^1]) return false;
		if(vis[u]) return true;
		vis[u] = true;
		s[c++] = u;
		for(int i = head[u]; ~i; i = next[i])
			if(!dfs(to[i])) return false;
		return true;
	}
	bool sloved(int n)
	{
		clc(vis,0);
		for(int i = 0; i < n<<1; i += 2)
		{
			if(!vis[i] && !vis[i^1])
			{
				c = 0;
				if(!dfs(i))
				{
					while(c) vis[s[--c]] = false;
					if(!dfs(i^1)) return false;
				}
			}
		}
		return true;
	}
}ts;
int x[MAXN][2], y[MAXN][2], z[MAXN][2], n;
double dis[MAXN][2][MAXN][2];

inline double get_dis(int a, int aa, int b, int bb){
	return sqrt(0.0+(x[a][aa]-x[b][bb])*(x[a][aa]-x[b][bb])+(y[a][aa]-y[b][bb])*(y[a][aa]-y[b][bb])+(z[a][aa]-z[b][bb])*(z[a][aa]-z[b][bb]));
}
bool ok(double r)
{
	ts.init();
	rep(i,0,n)
	{
		rep(a,0,2)
		{
			rep(j,i+1,n)
			{
				rep(b,0,2)
				{
					if(dis[i][a][j][b] > r*2) continue;
					ts.add_clause(i,a,j,b);
				}
			}
		}
	}
	return ts.sloved(n);
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	while(~scanf("%d%*c", &n))
	{
		rep(i,0,n)
		{
			rep(j,0,2) scanf("%d %d %d%*c", &x[i][j], &y[i][j], &z[i][j]);
		}
		double l = 0, r = 0, m,ans = 0;
		rep(i,0,n)
		{
			rep(a,0,2)
			{
				rep(j,i+1,n)
				{
					rep(b,0,2)
					{
						dis[i][a][j][b] = dis[j][b][i][a] = get_dis(i,a,j,b);
						r = max(r,dis[i][a][j][b]);
					}
				}
			}
		}
		while(l < r || fabs(r-l) < 1e-6)
		{
			m = (l+r)/2.0;
			if(ok(m)) ans = m, l = m+0.00001;
			else r = m-0.00001;
		}
		int ret = ans*1000;
		ans = ret/1000.0;
		printf("%.3f\n", ans);
	}
	return 0;
}
