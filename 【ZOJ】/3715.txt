#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100+10, MAXM = 100+10;
int head[MAXN], tol, nxt[MAXM], to[MAXM], del[MAXM];
int cost[MAXN],in[MAXN];

inline void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
struct NODE{
	int id, d;
	bool operator<(const NODE&t)const{
		return d < t.d;
	}
}node[MAXN];
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n;
		scanf("%d%*c", &n);
		clc(head,-1);
		tol = 0;
		clc(in,0);
		repe(i,2,n)
		{
			int v;
			scanf("%d%*c", &v);
			if(1 != v)
				add_edge(v,i);
			in[v]++;
		}
		repe(i,2,n) scanf("%d%*c", &cost[i]);
		int ans = INF;
		repe(p,in[1],n)
		{
			clc(del,0);
			int cnt = 0, tmp = 0;
			repe(u,2,n)
			{
				if(in[u] < p) continue;
				int c = 0;
				for(int i = head[u]; ~i; i = nxt[i])
				{
					if(del[i]) continue;
					int v = to[i];
					node[c++] = {i,cost[v]};
				}
				sort(node,node+c);
				for(int i = 0; i < c && i <= in[u]-p;i++)
				{
					cnt++;
					tmp += node[i].d;
					del[node[i].id] = 1;
				}
			}
			if(in[1]+cnt > p) continue;
			int c = 0;
			repe(u,2,n)
			{
				for(int i = head[u]; ~i; i = nxt[i])
				{
					if(del[i]) continue;
					int v = to[i];
					node[c++] = {i,cost[v]};
				}
			}
			sort(node,node+c);
			for(int i = 0; i < c && i < p-cnt-in[1]; i++)
				tmp += node[i].d;
			ans = min(ans,tmp);
		}
		printf("%d\n", ans);
	}
	return 0;
}
