#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
typedef pair<int,int> P;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 50000+10, MAXM = 50000+10,MAXOUT = MAXN;
char buf[MAXN], *ps = buf, *pe = buf+1;
inline void rnext(){
    if(++ps == pe)
        pe = (ps = buf)+fread(buf,1,sizeof(buf),stdin);
}
template <class T>
inline bool in_int(T &ans)
{
	ans = 0;
	T f = 1;
	if(ps == pe) return false;//EOF
    do{
        rnext();
		if('-' == *ps) f = -1;
    }while(!isdigit(*ps) && ps != pe);
    if(ps == pe) return false;//EOF
    do
    {
        ans = (ans<<1)+(ans<<3)+*ps-48;
        rnext();
    }while(isdigit(*ps) && ps != pe);
	ans *= f;
    return true;
}
char bufout[MAXOUT], outtmp[50],*pout = bufout, *pend = bufout+MAXOUT;
inline void write()
{
	fwrite(bufout,1,pout-bufout,stdout);
	pout = bufout;
}
inline void out_char(char c){ *(pout++) = c;if(pout == pend) write();}
inline void out_str(char *s)
{
	while(*s)
	{
		*(pout++) = *(s++);
		if(pout == pend) write();
	}
}
template <class T>
inline void out_int(T x) {
	if(!x)
	{
		out_char('0');
		return;
	}
	if(x < 0) x = -x,out_char('-');
	int len = 0;
	while(x)
	{
		outtmp[len++] = x%10+48;
		x /= 10;
	}
	outtmp[len] = 0;
	for(int i = 0, j = len-1; i < j; i++,j--) swap(outtmp[i],outtmp[j]);
	out_str(outtmp);
}
struct NODE{
	int id,v;
	bool operator<(const NODE &t) const{
		return v > t.v;
	}
}in[MAXN];
int head[MAXN],tol,nxt[MAXM], to[MAXM], ans[MAXN];

void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n,m,q;
	while(in_int(n))
	{
		in_int(m);in_int(q);
		clc(head,-1);
		tol = 0;
		rep(i,0,m)
		{
			int u,v;
			in_int(u);in_int(v);
			add_edge(u,v);
		}
		rep(i,0,q)
		{
			in_int(in[i].v);
			in[i].id = i;
		}
		sort(in,in+q);
		int p = 0, mi = INF, mi2 = INF;
		per(i,n,1)
		{
			for(int j = head[i]; ~j; j = nxt[j])
			{
				if(to[j] < mi) mi2 = mi,mi = to[j];
				else if(to[j] < mi2) mi2 = to[j];
			}
			if(i == in[p].v)
			{
				ans[in[p].id] = (mi2<i?i-mi2:0);
				if(++p >= q) break;
			}
		}
		rep(i,0,q) printf("%d\n", ans[i]);
	}
	return 0;
}