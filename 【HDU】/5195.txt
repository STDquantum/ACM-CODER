#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10;
int k, in[MAXN], head[MAXN], tol, to[MAXN], nxt[MAXN];
int mi[MAXN<<1];

void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
inline int id(int x, int y){return x+y|x!=y;}
void push_up(int x, int y, int m){
	mi[id(x,y)] = min(mi[id(x,m)], mi[id(m+1,y)]);
}
void bulid(int x, int y)
{
	if(x == y)
	{
		mi[id(x,y)] = in[x];
		return;
	}
	int m = (x+y)>>1;
	bulid(x,m);
	bulid(m+1,y);
	push_up(x,y,m);
}
void del(int x, int y, int p)
{
	if(x == y)
	{
		mi[id(x,y)]--;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m) del(x,m,p);
	else del(m+1,y,p);
	push_up(x,y,m);
}
int query(int x, int y)
{
	if(x == y)
	{
		k -= mi[id(x,y)];
		mi[id(x,y)] = INF;
		return x;
	}
	int m = (x+y)>>1, ans;
	if(mi[id(m+1,y)] <= k) ans = query(m+1,y);
	else ans = query(x,m);
	push_up(x,y,m);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n,m;
	while(~scanf("%d %d %d%*c", &n, &m, &k))
	{
		clc(in,0);
		clc(head,-1);
		tol = 0;
		rep(i,0,m)
		{
			int u,v;
			scanf("%d %d%*c", &u, &v);
			in[v]++;
			add_edge(u,v);
		}
		bulid(1,n);
		repe(i,1,n)
		{
			int p = query(1,n);
			printf("%d", p);
			if(i != n) putchar(' ');
			else putchar('\n');
			for(int i = head[p]; ~i; i = nxt[i])
			{
				int v = to[i];
				del(1,n,v);
			}
		}
	}
	return 0;
}
