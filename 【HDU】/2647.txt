/*拓扑排序+方向建边*/
#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
typedef long long LL;
#define MAXN 10010
#define MAXM 20010
struct NODE{
	int num, p;
	NODE(int a, int b){num = a, p = b;}
};
struct Edge{
	int next,v;
	Edge(int a = 0, int b = 0){next = a, v = b;}
}edge[MAXM];
int head[MAXN], tol, in[MAXN], n;

void add_edge(int u, int v)
{
	edge[tol] = Edge(head[u],v);
	head[u] = tol++;
}
int topo()
{
	int p = 0, ans = 0;
	queue<NODE> q;
	repe(i,1,n) if(!in[i]) q.push(NODE(i,0));
	while(!q.empty())
	{
		NODE buf = q.front();q.pop();
		ans += 888+buf.p;
		for(int i = head[buf.num]; ~i; i = edge[i].next)
		{
			int v = edge[i].v;
			if(!--in[v]) q.push(NODE(v,buf.p+1));
		}
		p++;
	}
	if(p < n) return -1;
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int m;
	while(~scanf("%d %d%*c", &n, &m))
	{
		int a,b;
		clc(head,-1);
		clc(in,0);
		tol = 0;
		rep(i,0,m)
		{
			scanf("%d %d%*c", &a, &b);
			add_edge(b,a);
			in[a]++;
		}
		printf("%d\n", topo());
	}
	return 0;
}
========================================================================================
/*差分约束*/
#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
typedef long long LL;
#define MAXN 10010
#define MAXM 30010
struct Edge{
	int next,v, cost;
	Edge(int a = 0, int b = 0,int c = 0){next = a, v = b, cost = c;}
}edge[MAXM];
int head[MAXN], tol,n, dis[MAXN], cnt[MAXN];
bool inq[MAXN];

void add_edge(int u, int v, int cost)
{
	edge[tol] = Edge(head[u],v,cost);
	head[u] = tol++;
}
int spfa(int s)
{
	queue<int> q;
	clc(inq,0);
	clc(cnt,0);
	repe(i,0,n) dis[i] = -INF;
	dis[s] = 0;
	inq[s] = true;
	q.push(s);
	while(!q.empty())
	{
		int u = q.front();q.pop();
		inq[u] = false;
		for(int i = head[u]; ~i; i = edge[i].next)
		{
			Edge &e = edge[i];
			if(dis[u] != -INF && dis[e.v] < dis[u]+e.cost)
			{
				dis[e.v] = dis[u]+e.cost;
				if(!inq[e.v])
				{
					inq[e.v] = true;
					q.push(e.v);
					if(++cnt[e.v] > n) return -1;
				}
			}
		}
	}
	int ans = n*888;
	repe(i,1,n) ans += dis[i];
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int m;
	while(~scanf("%d %d%*c", &n, &m))
	{
		int a,b;
		clc(head,-1);
		tol = 0;
		rep(i,0,m)
		{
			scanf("%d %d%*c", &a, &b);
			add_edge(b,a,1);
		}
		repe(i,1,n) add_edge(0,i,0);
		printf("%d\n", spfa(0));
	}
	return 0;
}