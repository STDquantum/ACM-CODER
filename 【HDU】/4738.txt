#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10, MAXM = MAXN*MAXN*2;
char buf[MAXM*2], *ps = buf, *pe = buf+1;//ps当前读取到的开头指针，pe当前缓存结尾指针
inline void rnext(){
	if(++ps == pe)
		pe = (ps = buf)+fread(buf,1,sizeof(buf),stdin);
}
inline int in()
{
	int ans = 0;
    if(ps == pe) return -1; //判断是否到文件结尾
	do{
		rnext();
	}while(!isdigit(*ps) && ps != pe);
	if(ps == pe) return -1;//判断是否到文件结尾
	do
	{
		ans = (ans<<1)+(ans<<3)+*ps-48;
		rnext();
	}while(isdigit(*ps) && ps != pe);
	return ans;
}
int head[MAXN],nxt[MAXM],to[MAXM],tol, cost[MAXN][MAXN];//二维cost为了处理重边,N大了需要hash或map
int n,m,clock, pre[MAXN],low[MAXN];//pre[]记录每个点的dfs进入计数
//low[u]记录u和u的后代能回到的最早的祖先的pre值

void add_edge(int u, int v, int w)//无向图需要反向再调用一次
{
    nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
	if(~cost[u][v]) cost[u][v] = INF;//如果u-v之间有多条变，直接把他们的权值变成INF(即u-v不是桥,计数的话需要dfs中去掉)
	else cost[u][v] = w;
}
int mi;
void dfs(int u, int fa)
{
    low[u] = pre[u] = ++clock;
    for(int i = head[u]; ~i; i = nxt[i])
    {
        int v = to[i];
        if(v == fa)continue;//因为是dfs树，不能往回走
        if(!pre[v])
        {
            dfs(v,u);
            low[u] = min(low[u],low[v]);
            if(low[v] > pre[u])//u-v是桥
                mi = min(mi,cost[u][v]);
        }
        else if(pre[v] < pre[u]) low[u] = min(low[u],pre[v]);//v是u的祖先
    }
}
int sloved()
{
    clc(pre,0);
    clock = 0;
	mi = INF;
    dfs(1,-1);
    if(clock != n) return 0;//原图不连通
    if(INF == mi) return -1;//没有桥
	return max(mi,1);//mi为0还需要一个人
}

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	while(~(n = in()) && ~(m = in()) && n+m)
	{
		tol = 0;
		clc(head,-1);
		clc(cost,-1);
		rep(i,0,m)
		{
			int u = in(),v = in(),w = in();
			add_edge(u,v,w);
			add_edge(v,u,w);
		}
		printf("%d\n", sloved());
	}
	return 0;
}
