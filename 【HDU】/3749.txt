#include <cstdio>
#include <cstring>
#include <vector>
#include <stack>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define clc(a,b) memset(a,b,sizeof(a))
#define min(a,b) (a>b?b:a)
#define MAXN 5010
struct Edge{
	int from, to;
	Edge(int a = 0, int b = 0){from = a, to = b;}
}edge[MAXN<<1];
int pre[MAXN], bccno[MAXN], f[MAXN],sum[MAXN], bcc_cnt, dfs_clock;
bool vis[MAXN];
vector<int> g[MAXN],num[MAXN];
stack<Edge> s;

int find(int x){return f[x] == x?x:f[x] = find(f[x]);}
int dfs(int u, int fa)
{
	int lowu = pre[u] = ++dfs_clock, sz = g[u].size();
	rep(i,0,sz)
	{
		int v = g[u][i];
		if(v == fa) continue;
		if(!pre[v])
		{
			s.push(Edge(u,v));
			int lowv = dfs(v,u);
			lowu = min(lowu, lowv);
			if(lowv >= pre[u])
			{
				Edge x;
				bcc_cnt++;
				do{
					x = s.top();s.pop();
					if(bccno[x.from] != bcc_cnt)
					{
						sum[bcc_cnt]++,bccno[x.from] = bcc_cnt;
						num[x.from].push_back(bcc_cnt);
					}
					if(bccno[x.to] != bcc_cnt)
					{
						sum[bcc_cnt]++, bccno[x.to] = bcc_cnt;
						num[x.to].push_back(bcc_cnt);
					}
				}while(!(x.from == u && x.to == v));
			}
		}
		else if(pre[v] < pre[u])
		{
			s.push(Edge(u,v));
			lowu = min(lowu,pre[v]);
		}
	}
	return lowu;
}
int inone(int a, int b)
{
	int sz = num[a].size(), bz = num[b].size();
	rep(i,0,sz)
	{
		rep(j,0,bz)
			if(num[a][i] == num[b][j]) return num[a][i];
	}
	return -1;
}
int main()
{
#ifdef SHY
    freopen("e:\\1.txt","r",stdin);
#endif
	int n,m,q,count = 0;
	while(~scanf("%d %d %d%*c", &n, &m, &q) && n+m+q)
	{
		int a,b;
		rep(i,0,n) g[i].clear(), num[i].clear(), f[i] = i;
		rep(i,0,m)
		{
			scanf("%d %d%*c", &a, &b);
			edge[i] = Edge(a,b);
			g[a].push_back(b), g[b].push_back(a);
			int x = find(a), y = find(b);
			if(x != y) f[y] = x;
		}
		bcc_cnt = dfs_clock = 0;
		clc(pre,0);
		clc(bccno,0);
		clc(sum,0);
		rep(i,0,n) if(!pre[i]) dfs(i,-1);
		printf("Case %d:\n", ++count);
		rep(i,0,q)
		{
			scanf("%d %d%*c", &a, &b);
			int c;
			if(find(a) != find(b)) puts("zero");
			else if(~(c=inone(a,b)) && sum[c] > 2) puts("two or more");
			else puts("one");
		}
	}
	return 0;
}