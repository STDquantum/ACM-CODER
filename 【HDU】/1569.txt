#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
#define MAXN 2600
#define INF 0x3f3f3f3f
struct ISAP{
    struct Edge{
        int from, to, cap, flow;
        Edge(int a, int b, int c, int d){
            from = a, to = b, cap = c, flow = d;
        }
    };
    int p[MAXN]/*可增广的上一条弧*/, num[MAXN]/*距离标号计数*/, d[MAXN]/*起点到i距离*/,cur[MAXN]/*当前弧下标*/;
    int n, s, t;//节点数，边数，起点，终点
    vector<int> g[MAXN];//邻接表
    vector<Edge> edge;
    bool vis[MAXN];
    void init()
    {
        edge.clear();
        for(int i = 0; i <= n; i++) g[i].clear();
        memset(num,0,sizeof(num));
        memset(cur,0,sizeof(cur));
    }
    void add_edge(int from, int to, int cap)
    {
        edge.push_back(Edge(from,to,cap,0));
        edge.push_back(Edge(to,from,0,0));
        int sum = edge.size();
        g[from].push_back(sum-2);
        g[to].push_back(sum-1);
    }
    int augment()
    {
        int x = t, a = INF;
        while(x != s)
        {
            Edge& e = edge[p[x]];
            a = min(a, e.cap-e.flow);
            x = edge[p[x]].from;
        }
        x = t;
        while(x != s)
        {
            edge[p[x]].flow += a;
            edge[p[x]^1].flow -= a;
            x = edge[p[x]].from;
        }
        return a;
    }
    bool bfs()
    {
        memset(vis,0,sizeof(vis));
        queue<int> q;
        q.push(t);
        d[t] = 0;
        vis[t] = 1;
        while(!q.empty())
        {
            int x = q.front(); q.pop();
            for(int i = 0; i < g[x].size(); i++)
            {
                Edge& e = edge[g[x][i]];
                if(!vis[e.to])
                {
                    vis[e.to] = 1;
                    d[e.to] = d[x]+1;
                    q.push(e.to);
                }
            }
        }
        return vis[s];
    }
    int maxflow(int s, int t)
    {
        this->s = s, this->t = t;
        int flow = 0;
        bfs();
        for(int i = 0; i < n; i++) num[d[i]]++;
        int x = s;
        while(d[s] < n)
        {
            if(x == t)
            {
                flow += augment();
                x = s;
            }
            int ok = 0;
            for(int i = cur[x]; i < g[x].size(); i++)
            {
                Edge& e = edge[g[x][i]];
                if(e.cap > e.flow && d[x] == d[e.to]+1)
                {
                    ok = 1;
                    p[e.to] = g[x][i];
                    cur[x] = i;
                    x = e.to;
                    break;
                }
            }
            if(!ok)
            {
                int sum = n-1;
                for(int i = 0; i < g[x].size(); i++)
                {
                    Edge& e = edge[g[x][i]];
                    if(e.cap > e.flow) sum = min(sum,d[e.to]);
                }
                if(--num[d[x]] == 0) return flow;//gap优化
                num[d[x] = sum+1]++;
                cur[x] = 0;
                if(x != s) x = edge[p[x]].from;
            }
        }
        return flow;
    }
}isap;
int map[55][55], col[55][55], st, ed, n, m;
const int d[4][2]={{-1,0},{1,0},{0,-1},{0,1}};

inline int hh(int x, int y){return x*m+y;}
void dfs(int x, int y, int c)
{
	col[x][y] = c;
	for(int i = 0; i < 4; i++)
	{
		int ni = x+d[i][0], nj = y+d[i][1];
		if(0 <= ni && n > ni && 0 <= nj && m > nj && -1 == col[ni][nj])
			dfs(ni,nj,!c);
	}
} 

int main()
{
#ifdef SHY
    freopen("e:\\1.txt","r",stdin);
#endif
    while(~scanf("%d %d%*c", &n, &m))
    {
        int sum = 0;
		st = n*m, ed = st+1;
		isap.n = ed+1;
        isap.init();
		for(int i = 0; i < n; i++)
		{
			for(int j = 0; j < m; j++)
				scanf("%d%*c", &map[i][j]), sum += map[i][j];
		}
		memset(col,-1,sizeof(col));
		dfs(0,0,1);
		for(int i = 0; i < n; i++)
		{
			for(int j = 0; j < m; j++)
			{
				if(col[i][j])
				{
					isap.add_edge(st,hh(i,j),map[i][j]);
					for(int k = 0; k < 4; k++)
					{
						int ni = i+d[k][0], nj = j+d[k][1];
						if(0 <= ni && n > ni && 0 <= nj && m > nj)
							isap.add_edge(hh(i,j),hh(ni,nj),INF);  
					}
				}
				else
					isap.add_edge(hh(i,j),ed,map[i][j]);
			}
		}
        printf("%d\n", sum-isap.maxflow(st,ed));
    }
    return 0;
}