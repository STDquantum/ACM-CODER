#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <bitset>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 50000+10;
struct NODE{
    int ed,time;
    bool operator<(const NODE&t)const{
        return time < t.time;
    }
}c[MAXN];

int cnt[MAXN],a[MAXN],b[MAXN],mx;
inline int lowbit(int x){return x&-x;}
int sum(int x)
{
    int ans = 0;
    while(x > 0)
    {
        ans += cnt[x];
        x -= lowbit(x);
    }
    return ans;
}
void update(int x, int num)
{
    while(x <= mx)
    {
        cnt[x] += num;
        x += lowbit(x);
    }
}
struct cmp
{
    bool operator () (int x, int y)
    {
        return sum(x)+b[x] > sum(y)+b[y]; // x小的优先级高
    }
};
priority_queue<int, vector<int>, cmp>q[2];


int main()
{
#ifdef SHY
    freopen("d:\\1.txt", "r", stdin);
#endif
    int t;
    scanf("%d", &t);
    while(t--)
    {
        int n,m;
        scanf("%d%d", &n,&m);
        mx = n+1;
        clc(cnt,0);
        repe(i,1,n)
        {
            scanf("%d%d", &a[i], &b[i]);
        }
        rep(i,0,m) scanf("%d", &c[i].time),c[i].ed = c[i].time;
        sort(c,c+m);
        int ans = n;
        while(!q[0].empty()) q[0].pop();
        while(!q[1].empty()) q[1].pop();
        int p = 0;
        repe(i,1,n)
        {
            int v = a[i]^1, s = sum(i)+b[i];
            while(!q[v].empty() && sum(q[v].top())+b[q[v].top()] < s) q[v].pop(),ans--;
            while(p < m && c[p].time == i)
            {
                update(1,1);
                update(c[p].ed+1,-1);
                p++;
            }
            q[a[i]].push(i);
        }
        printf("%d\n", ans);
    }
    return 0;
}