#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10, MAXM = MAXN*3*2;
int head[MAXN], tol,nxt[MAXM],to[MAXM];
bool ok[MAXN][MAXN];

inline void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
int a[5],num,cnt[5];
bool can(int d, int v)
{
	rep(i,0,d)
	{
		if(!ok[a[i]][v]) return false;
	}
	return true;
}
void dfs(int u, int d)
{
	cnt[d]++;
	if(4 == d) return;
	for(int i = head[u]; ~i; i = nxt[i])
	{
		int v = to[i];
		if(v < u || !can(d,v)) continue;
		a[d] = v;
		num = max(num,d+1);
		dfs(v,d+1);
	}
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n,m;
	while(~scanf("%d %d", &n, &m))
	{
		rep(i,0,n) scanf("%*d %*d");
		clc(head,-1);
		tol = 0;
		clc(ok,0);
		rep(i,0,m)
		{
			int u,v;
			scanf("%d %d", &u, &v);
			add_edge(u,v);
			add_edge(v,u);
			ok[u][v] = ok[v][u] = 1;
		}
		clc(cnt,0);
		num = 1;
		repe(i,1,n)
		{
			a[0] = i;
			dfs(i,1);
		}
		printf("%d %d\n", num,cnt[num]);
	}
	return 0;
}
