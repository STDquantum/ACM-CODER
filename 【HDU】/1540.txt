#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define MAXN 50010
#define lc u<<1
#define rc u<<1|1
struct NODE{
	int x, y, lmx, rmx;
}node[MAXN<<2];

void push_up(NODE &fa, const NODE& l, const NODE &r)
{
	fa.lmx = l.lmx;
	if(l.lmx == l.y-l.x+1) fa.lmx += r.lmx;
	fa.rmx = r.rmx;
	if(r.lmx == r.y-r.x+1) fa.rmx += l.rmx;
}
void bulid(int u, int x, int y)
{
	node[u].x = x, node[u].y = y;
	if(x == y)
	{
		node[u].lmx = node[u].rmx = 1;
		return;
	}
	int m = (x+y)>>1;
	bulid(lc,x,m);
	bulid(rc,m+1,y);
	push_up(node[u], node[lc], node[rc]);
}
int p,v;
void update(int u)
{
	int x = node[u].x, y = node[u].y;
	if(x == y)
	{
		node[u].lmx = node[u].rmx = v;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m) update(lc);
	else update(rc);
	push_up(node[u], node[lc], node[rc]);
}
int ql, qr;
NODE query(int u)
{
	int x = node[u].x, y = node[u].y;
	if(ql <= x && y <= qr)
		return node[u];
	int m = (x+y)>>1;
	NODE ans;
	if(ql <= m && qr > m)
	{
		NODE a = query(lc),b = query(rc);
		push_up(ans, a,b);
		ans.x = a.x, ans.y = b.y;
	}
	else if(ql <= m) ans = query(lc);
	else ans = query(rc);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n,m;
	while(~scanf("%d %d%*c", &n, &m))
	{
		bulid(1,1,n);
		char ch[10];
		stack<int> dd;
		rep(i,0,m)
		{
			scanf("%s", ch);
			if('Q' == ch[0])
			{
				scanf("%d%*c", &p);
				if(1 == p)
				{
					printf("%d\n", node[1].lmx);
					continue;
				}
				if(n == p)
				{
					printf("%d\n", node[1].rmx);
					continue;
				}
				ql = 1, qr = p;
				NODE a = query(1);
				ql = p, qr = n;
				NODE b = query(1);
				if(a.rmx+b.lmx == 0) puts("0");
				else printf("%d\n", a.rmx+b.lmx-1);
			}
			else if('D' == ch[0])
			{
				scanf("%d%*c", &p);
				v = 0;
				dd.push(p);
				update(1);
			}
			else
			{
				if(dd.empty()) continue;
				p = dd.top(), dd.pop();
				v = 1;
				update(1);
			}
		}
	}
	return 0;
}
