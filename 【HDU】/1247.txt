#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define MAXN 50010
int tree[MAXN<<4][28], cnt, val[MAXN<<4];
string str[MAXN];

void init()
{
	clc(tree[0], -1);
	cnt = 1;
}
void insert(const char *s)
{
	int u = 0, n = strlen(s);
	rep(i,0,n)
	{
		int c = s[i]-'a';
		if(-1 == tree[u][c])
		{
			clc(tree[cnt],-1);
			val[cnt] = 0;
			tree[u][c] = cnt++;
		}
		u = tree[u][c];
	}
	val[u] = 1;
}
bool find(const char *s)
{
	int u = 0, n = strlen(s);
	rep(i,0,n)
	{
		int c = s[i]-'a';
		if(-1 == tree[u][c]) return false;
		u = tree[u][c];
	}
	return val[u];
}
bool query(const char *s, int n)
{
	int u = 0, sum = 0;
	rep(i,0,n)
	{
		int c = s[i]-'a';
		if(val[u] && find(s+i)) return true;
		u = tree[u][c];
	}
	return false;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n = 0;
	char s[100];
	init();
	while(~scanf("%s", s))
	{
		str[n++] = s;
		insert(s);
	}
	rep(i,0,n)
	{
		if(query(str[i].c_str(), str[i].size()))
			puts(str[i].c_str());
	}
	return 0;
}
