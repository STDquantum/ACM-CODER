/*递推*/
#include <stdio.h>

void main ()
{
	int n, i;
	_int64 s[40];
	for (i = 2, s[0] = 3, s[1] = 8; i < 39; i++)
	{
		s[i] = 2 * (s[i-1] + s[i-2]);
	}

	while (EOF != scanf ("%d", &n))
	{
		getchar ();
		printf ("%I64d\n", s[n-1]);
	}
}
========================================================
/*动态规划*/
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 40+10;
LL dp[MAXN][1<<3][3];//dp[i][j][k]表示i个字符中出现了状态j的字符并且以k结尾的情况数

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	dp[1][1<<0][0] = dp[1][1<<1][1] = dp[1][1<<2][2] = 1;
	rep(i,1,39)
	{
		rep(j,0,8)
		{
			rep(k,0,3)
			{
				//if(0 == j&(1<<k)) continue;
				rep(l,0,3)
				{
					if(k == 0 && l == 0) continue;
					dp[i+1][j|(1<<l)][l] += dp[i][j][k];
				}
			}
		}
	}
	int n;
	while(~scanf("%d", &n))
	{
		LL ans = 0;
		rep(i,0,8) rep(j,0,3) ans += dp[n][i][j];
		printf("%lld\n", ans);
	}
	return 0;
}
