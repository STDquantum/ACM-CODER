#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 25;
int k;
LL dp[MAXN][1<<11][MAXN];
int bit[MAXN];

int nxt(int s, int v)
{
	int tmp = 0;
	rep(i,v,10)
	{
		if(s&(1<<i)) return (s^(1<<i))|(1<<v);
	}
	return s|(1<<v);
}
int get_sum(int s)
{
	int cnt = 0;
	while(s)
	{
		if(s&1) cnt++;
		s >>= 1;
	}
	return cnt;
}
LL dfs(int len, int s,int ismax, bool z)
{
	if(!len) return get_sum(s) == k;
	LL &ans = dp[len][s][k];
	if(!ismax && ~ans) return ans;
	//if(get_sum(s) > k) return 0;
	LL sum = 0;
	int mx = ismax?bit[len]:9;
	repe(i,0,mx)
		sum += dfs(len-1,(z&&0==i)?0:nxt(s,i),ismax&&i==mx,z&&0==i);
	return ismax?sum:ans = sum;
}
LL sloved(LL n)
{
	int len = 0;
	while(n)
	{
		bit[++len] = n%10;
		n /= 10;
	}
	return dfs(len,0,1,1);
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t,count = 0;
	scanf("%d", &t);
	clc(dp,-1);
	while(t--)
	{
		LL x,y;
		scanf("%I64d %I64d %d", &x, &y, &k);
		printf("Case #%d: %I64d\n", ++count,sloved(y)-sloved(x-1));
	}
	return 0;
}
