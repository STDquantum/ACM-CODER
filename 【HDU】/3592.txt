#include <cstdio>
#include <cstring>
#include <cmath>
#include <string>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
typedef long long LL;
#define MAXN 1010
#define MAXM 10010
struct Edge{
	int next, v, cost;
	Edge(int a = 0, int b = 0, int c = 0){next = a, v = b, cost = c;}
}edge[4*MAXM];
int head[MAXN],tol, dis[MAXN], cnt[MAXN], n;
bool inq[MAXN];

void add_edge(int u, int v, int cost)
{
	edge[tol] = Edge(head[u], v, cost);
	head[u] = tol++;
}
bool spfa(int s)
{
	queue<int> q;
	clc(inq,0);
	clc(cnt,0);
	repe(i,1,n) dis[i] = -INF;
	inq[s] = true;
	dis[s] = 0;
	q.push(s);
	while(!q.empty())
	{
		int u = q.front();q.pop();
		inq[u] = false;
		for(int i = head[u]; ~i; i = edge[i].next)
		{
			Edge &e = edge[i];
			if(dis[e.v] < dis[u]+e.cost)
			{
				dis[e.v] = dis[u]+e.cost;
				if(!inq[e.v])
				{
					inq[e.v] = true;
					q.push(e.v);
					if(++cnt[e.v] > n) return false;
				}
			}
		}
	}
	return true;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int x,y,a,b,c;
		scanf("%d %d %d%*c", &n, &x, &y);
		clc(head,-1);
		tol = 0;
		rep(i,0,x)
		{
			scanf("%d %d %d%*c", &a, &b, &c);
			add_edge(b,a,-c);
		}
		rep(i,0,y)
		{
			scanf("%d %d %d%*c", &a, &b, &c);
			add_edge(a,b,c);
		}
		repe(i,2,n) add_edge(i-1,i,0);
		if(!spfa(n)) puts("-1");
		else if(dis[1] == -INF) puts("-2");
		else printf("%d\n", -dis[1]);
	}
	return 0;
}