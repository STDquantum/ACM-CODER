#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <bitset>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f;
const int MAXN = 9999,MAXSIZE = 1010,DLEN = 4;//大数一个int存几位,一般不改,改动下面的4都要改
const int LEN = 54;//可以控制大数位数=DLEN*LEN
struct BigInter{
    int a[LEN];
    int len;
    BigInter(){ len = 1; memset(a, 0, sizeof(a)); } //构造函数
    BigInter(const int); //将一个int类型的变量转化成大数
    BigInter(const char*); //将一个字符串类型的变量转化为大数
    BigInter(const BigInter &); //拷贝构造函数
    BigInter &operator=(const BigInter &); //重载赋值运算符，大数之间进行赋值运算
    BigInter operator+(const BigInter &)const; //重载加法运算符，两个大数之间的相加运算
    BigInter operator-(const BigInter &)const; //重载减法运算符，两个大数之间的相减运算
    BigInter operator*(const BigInter &)const; //重载乘法运算符，两个大数之间的相乘运算
    BigInter operator/(const int &)const; //重载除法运算符，大数对一个整数进行相除运算
    BigInter operator^(const int &)const; //大数的n次方运算
    int operator%(const int &)const; //大数对一个int类型的变量进行取模运算
    bool operator>(const BigInter &T)const; //大数和另一个大数的大小比较
    bool operator>(const int &t)const; //大数和一个int类型的变量的大小比较
    void print(); //输出大数
};
BigInter::BigInter(const int b) //将一个int类型的变量转化为大数
{
    int c,d = b;
    len = 0;
    clc(a,0);
    while(d > MAXN)
    {
        c = d-(d/(MAXN+1))*(MAXN+1);
        d = d/(MAXN+1);
        a[len++] = c;
    }
    a[len++] = d;
}
BigInter::BigInter(const char *s) //将一个字符串类型的变量转化为大数
{
    int t,k,index,L;
    clc(a,0);
    L = strlen(s);
    len = L/DLEN;
    if(L%DLEN)len++;
    index = 0;
    for(int i = L-1; i >= 0; i -= DLEN)
    {
        t = 0;
        k = i-DLEN+1;
        if(k < 0)k = 0;
        repe(j,k,i) t = t*10+s[j]-'0';
        a[index++] = t;
    }
}
BigInter::BigInter(const BigInter &T) :len(T.len) //拷贝构造函数
{
    clc(a,0);
    rep(i,0,len) a[i] = T.a[i];
}
BigInter & BigInter::operator=(const BigInter &n) //重载赋值运算符，大数之间赋值运算
{
    len = n.len;
    clc(a,0);
    rep(i,0,len) a[i] = n.a[i];
    return *this;
}
BigInter BigInter::operator+(const BigInter &T)const //两个大数之间的相加运算
{
    BigInter t(*this);
    int i, big;
    big = T.len > len ? T.len : len;
    for (i = 0; i < big; i++)
    {
        t.a[i] += T.a[i];
        if (t.a[i] > MAXN)
        {
            t.a[i + 1]++;
            t.a[i] -= MAXN + 1;
        }
    }
    if (t.a[big] != 0)
        t.len = big + 1;
    else t.len = big;
    return t;
}
BigInter BigInter::operator-(const BigInter &T)const //两个大数之间的相减运算
{
    bool flag;
    BigInter t1, t2;
    if (*this > T)
    {
        t1 = *this;
        t2 = T;
        flag = 0;
    }
    else
    {
        t1 = T;
        t2 = *this;
        flag = 1;
    }
    int big = t1.len;
    rep(i,0,big)
    {
        if(t1.a[i]<t2.a[i])
        {
            int j = i + 1;
            while(t1.a[j] == 0) j++;
            t1.a[j--]--;
            while(j>i) t1.a[j--] += MAXN;
            t1.a[i] += MAXN + 1 - t2.a[i];
        }
        else t1.a[i] -= t2.a[i];
    }
    t1.len = big;
    while(t1.a[t1.len-1] == 0 && t1.len > 1)
    {
        t1.len--;
        big--;
    }
    if(flag) t1.a[big - 1] = 0-t1.a[big - 1];
    return t1;
}
BigInter BigInter::operator*(const BigInter &T)const //两个大数之间的相乘
{
    BigInter ret;
    int i, j, up;
    int temp, temp1;
    for (i = 0; i < len; i++)
    {
        up = 0;
        for (j = 0; j < T.len; j++)
        {
            temp = a[i] * T.a[j] + ret.a[i + j] + up;
            if (temp > MAXN)
            {
                temp1 = temp - temp / (MAXN + 1)*(MAXN + 1);
                up = temp / (MAXN + 1);
                ret.a[i + j] = temp1;
            }
            else
            {
                up = 0;
                ret.a[i + j] = temp;
            }
        }
        if (up != 0)
            ret.a[i + j] = up;
    }
    ret.len = i + j;
    while (ret.a[ret.len - 1] == 0 && ret.len > 1)ret.len--;
    return ret;
}
BigInter BigInter::operator/(const int &b)const //大数对一个整数进行相除运算
{
    BigInter ret;
    int down = 0;
    per(i,len-1,0)
    {
        ret.a[i] = (a[i] + down*(MAXN + 1)) / b;
        down = a[i] + down*(MAXN + 1) - ret.a[i] * b;
    }
    ret.len = len;
    while (ret.a[ret.len - 1] == 0 && ret.len > 1)
        ret.len--;
    return ret;
}
int BigInter::operator%(const int &b)const //大数对一个 int类型的变量进行取模
{
    int d = 0;
    per(i,len-1,0) d = (((LL)d*(MAXN + 1)) % b + a[i]) % b;
    return d;
}
BigInter BigInter::operator^(const int &n)const //大数的n次方运算
{
    BigInter t, ret(1);
    int i;
    if (n < 0)exit(-1);
    if (n == 0)return 1;
    if (n == 1)return *this;
    int m = n;
    while(m > 1)
    {
        t = *this;
        for (i = 1; (i << 1) <= m; i <<= 1)
            t = t*t;
        m -= i;
        ret = ret*t;
        if (m == 1)ret = ret*(*this);
    }
    return ret;
}
bool BigInter::operator>(const BigInter &T)const //大数和另一个大数的大小比较
{
    int ln;
    if (len > T.len)return true;
    else if (len == T.len)
    {
        ln = len - 1;
        while (a[ln] == T.a[ln] && ln >= 0)
            ln--;
        if (ln >= 0 && a[ln] > T.a[ln])
            return true;
        else
            return false;
    }
    else
        return false;
}
bool BigInter::operator>(const int &t)const //大数和一个int类型的变量的大小比较
{
    BigInter b(t);
    return *this > b;
}
void BigInter::print() //输出大数
{
    int i;
    printf("%d", a[len - 1]);
    for (i = len - 2; i >= 0; i--)
        printf("%04d", a[i]);
    printf("\n");
}
char s[50];

int main()
{
#ifdef SHY
    freopen("d:\\1.txt", "r", stdin);
#endif
    while(~scanf("%s", s))
    {
        BigInter n = BigInter(s);
        if(n%3 == 0 || n%2 == 0 || n%5 == 0)
            puts("YES");
        else puts("NO");
    }
    return 0;
}