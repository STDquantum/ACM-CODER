#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 200+10, MAXM = 20000+10;
struct Edge{
	int next, u,v,cap;
}edge[MAXM<<1];
int tol,head[MAXN];

void add_edge(int u, int v, int cap, int cap2 = 0)
{
	Edge e = {head[u],u,v,cap};
	edge[tol] = e;
	head[u] = tol++;
	Edge e1 = {head[v],v,u,cap2};
	edge[tol] = e1;
	head[v] = tol++;
}
int d[MAXN],st,ed;
bool bfs()
{
	queue<int> q;
	clc(d,-1);
	q.push(st);
	d[st] = 0;
	while(!q.empty())
	{
		int u = q.front();q.pop();
		for(int i = head[u]; ~i; i = edge[i].next)
		{
			int v = edge[i].v;
			if(-1 == d[v] && edge[i].cap)
			{
				d[v] = d[u]+1;
				q.push(v);
				if(~d[ed]) return true;
			}
		}
	}
	return false;
}
int s[MAXN],top,cur[MAXN];
int maxflow()
{
	int ans = 0;
	while(bfs())
	{
		memcpy(cur,head,sizeof(head));
		int u = st;
		top = 0;
		while(1)
		{
			if(u == ed)
			{
				int flow = INF, loc;
				rep(i,0,top)
				{
					if(flow > edge[s[i]].cap)
					{
						flow = edge[s[i]].cap;
						loc = i;
					}
				}
				rep(i,0,top)
				{
					edge[s[i]].cap -= flow;
					edge[s[i]^1].cap += flow;
				}
				ans += flow;
				u = edge[s[top=loc]].u;
			}
			for(int i = cur[u]; ~i; cur[u] = i = edge[i].next)
			if(edge[i].cap && d[u]+1 == d[edge[i].v]) break;
			if(~cur[u])
			{
				s[top++] = cur[u];
				u = edge[cur[u]].v;
			}
			else
			{
				if(!top) break;
				d[u] = -1;
				u = edge[s[--top]].u;
			}
		}
	}
	return ans;
}
int v[MAXN];

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		clc(head,-1);
		tol = 0;
		int n,m;
		scanf("%d %d %d %d%*c", &n, &m, &st, &ed);
		repe(i,1,n) scanf("%d%*c", &v[i]);
		v[st] = v[ed] = INF;
		rep(i,0,m)
		{
			int a,b;
			scanf("%d %d%*c", &a, &b);
			add_edge(a+n,b,v[b]);
			add_edge(b+n,a,v[a]);
		}
		repe(i,1,n) add_edge(i,i+n,v[i]);
		ed += n;
		printf("%d\n", maxflow());
	}
	return 0;
}
