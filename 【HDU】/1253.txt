#include <stdio.h>
#include <queue>
#define N 51
using namespace std;
struct zb{
    int a, b, c, cost;
};
int map[N][N][N], a, b, c;

int bfs ();

int main ()
{
    int n, ans;
    scanf ("%d%*c", &n);
    while (n--)
    {
        int i, j, k, t;
        scanf ("%d %d %d %d%*c", &a, &b, &c, &t);
        for (i = 0;  i < a; i++)
        {
            for (j = 0;  j < b; j++)
            {
                for (k = 0; k < c; k++)
                {
                    scanf ("%d%*c", &map[i][j][k]);
                }
            }
        }
        
        ans = bfs();
        if (ans < t)
            printf ("%d\n", ans);
        else
            printf ("-1\n");
        
    }

    return 0;
}

int bfs ()
{
    int i, d[6][3] = {{0,-1,0},{0,1,0},{0,0,1},{0,0,-1},{1,0,0},{-1,0,0}};
    zb start, p, buf;
    start.a = start.b = start.c = start.cost = 0;
    queue <zb> que;
    que.push(start);
	map[0][0][0] = 1;
    while (que.size())
    {
        p = que.front(), que.pop();
        if (p.a == a-1 && p.b == b-1 && p.c == c-1)
            return p.cost;
        for (i = 0;  i < 6; i++)
        {
            buf.a = p.a+d[i][0];
            buf.b = p.b+d[i][1];
            buf.c = p.c+d[i][2];
            if (0 <= buf.a && a > buf.a && 0 <= buf.b && b > buf.b && 0 <= buf.c && c > buf.c && 0 == map[buf.a][buf.b][buf.c])
            {
                buf.cost = p.cost+1;
				map[buf.a][buf.b][buf.c] = 1;
                que.push(buf);
            }
        }
    }
    return 99999999;
}