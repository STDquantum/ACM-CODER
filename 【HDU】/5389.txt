#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10,MAXIN = 10000, MOD = 258280327;
char buf[MAXIN], *ps = buf, *pe = buf+1;
inline void rnext(){
	if(++ps == pe) pe = (ps = buf)+fread(buf,sizeof(char),sizeof(buf)/sizeof(char),stdin);
}
template <class T>
inline bool in(T &ans)
{
	ans = 0;
	T f = 1;
	if(ps == pe) return false;
	do{ rnext(); if('-' == *ps) f = -1;} while(!isdigit(*ps) && ps != pe);
	if(ps == pe) return false;
	do{ ans = (ans<<1)+(ans<<3)+*ps-48;rnext();}while(isdigit(*ps) && ps != pe);
	ans *= f;
	return true;
}
int dp[2][10];

int mymod(int x)
{
	int ans = x%9;
	if(!ans) ans = 9;
	return ans;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	in(t);
	while(t--)
	{
		int n,x,y,sum = 0,a,now = 1;
		in(n);in(x);in(y);
		clc(dp,0);
		dp[now^1][0] = 1;
		repe(i,1,n)
		{
			in(a), sum += a, now ^= 1;
			memcpy(dp[now^1],dp[now],sizeof(dp[now]));
			repe(j,0,9)
			{
				int w = mymod(j+a);
				dp[now^1][w] = (dp[now^1][w]+dp[now][j])%MOD;
			}
		}
		int ans = 0;
		if(mymod(x+y) == mymod(sum))
		{
			ans += dp[now^1][x];
			if(x == mymod(sum)) ans--;
		}
		if(x == mymod(sum)) ans++;
		if(y == mymod(sum)) ans++;
		printf("%d\n", ans%MOD);
	}
	return 0;
}
