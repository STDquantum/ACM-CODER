#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100+10;
bool g[MAXN][MAXN];
int head[MAXN],tol,nxt[MAXN*MAXN],to[MAXN*MAXN];

void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
int col[MAXN];
bool dfs(int u, int c)
{
	col[u] = c;
	for(int i = head[u]; ~i; i = nxt[i])
	{
		int v = to[i];
		if(~col[v] && col[v] == c) return false;
		if(-1 == col[v] && !dfs(v,c^1)) return false;
	}
	return true;
}
bool sloved(int n)
{
	clc(col,-1);
	repe(i,1,n)
	{
		if(-1 == col[i] && !dfs(i,0))
			return false;
	}
	return true;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n;
	while(~scanf("%d", &n))
	{
		clc(g,0);
		repe(i,1,n)
		{
			int v;
			while(~scanf("%d", &v) && v)
				g[i][v] = true;
		}
		clc(head,-1);
		tol = 0;
		repe(i,1,n)
		{
			repe(j,i+1,n)
			{
				if(g[i][j] && g[j][i]) continue;
				add_edge(i,j);
				add_edge(j,i);
			}
		}
		if(sloved(n)) puts("YES");
		else puts("NO");
	}
	return 0;
}
