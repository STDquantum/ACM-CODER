#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 5000+10;
struct P{
    int a,b;
    bool operator<(const P&t) const{
        return b < t.b;
    }
};
struct NODE{
    P x[4];
}p[MAXN];
int cnts;
struct S{
    int num[4];
}ALL[30];
int dp[MAXN][4][4][4][4];

bool ok(int id, int s)//第id步,四个状态为ALL[s]时是否合法
{
    rep(i,1,4)
        if(p[id].x[ALL[s].num[i]].b < p[id].x[ALL[s].num[i-1]].b) return false;
    return true;
}
int cost(int id, int nxt, int a, int b)//第id步的状态ALL[a]转移到第nxt步的状态ALL[b]的花费
{
    int sum = 0;
    int *from = ALL[a].num, *to = ALL[b].num;
    rep(i,0,4)
    {
        sum += abs(p[id].x[from[i]].a-p[nxt].x[to[i]].a)+abs(p[id].x[from[i]].b-p[nxt].x[to[i]].b);
    }
    return sum;
}
int main()
{
#ifdef SHY
    freopen("d:\\1.txt", "r", stdin);
#endif
    int t,count = 0;
    scanf("%d%*c", &t);
    repe(i,1,4)
    {
        p[0].x[i-1].a = 0;
        p[0].x[i-1].b = i;
    }
    int s[4] = {0,1,2,3};
    cnts = 0;
    do{
        memcpy(ALL[cnts++].num, s,sizeof(int)*4);
    }while(next_permutation(s,s+4));
    while(t--)
    {
        int n;
        scanf("%d%*c", &n);
        repe(i,1,n)
        {
            rep(j,0,4)
            {
                scanf("%d %d%*c", &p[i].x[j].a, &p[i].x[j].b);
            }
            sort(p[i].x,p[i].x+4);
        }
        clc(dp,0x3f);
        dp[0][0][1][2][3] = 0;
        rep(i,0,n)
        {
            rep(j,0,cnts)
            {
                if(!ok(i,j)) continue;
                int s1 = ALL[j].num[0], s2 = ALL[j].num[1], s3 = ALL[j].num[2], s4 = ALL[j].num[3];
                int &now = dp[i][s1][s2][s3][s4];
                rep(k,0,cnts)
                {
                    if(!ok(i+1,k)) continue;
                    s1 = ALL[k].num[0], s2 = ALL[k].num[1], s3 = ALL[k].num[2], s4 = ALL[k].num[3];
                    int &nxt = dp[i+1][s1][s2][s3][s4];
                    nxt = min(nxt, now+cost(i,i+1,j,k));
                }
            }
        }
        int ans = INF;
        rep(i,0,cnts)
        {
            ans = min(ans, dp[n][ALL[i].num[0]][ALL[i].num[1]][ALL[i].num[2]][ALL[i].num[3]]);
        }
        printf("Case #%d:\n%d\n", ++count,ans);
    }
    return 0;
}