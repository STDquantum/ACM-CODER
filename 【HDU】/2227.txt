/*Ïß¶ÎÊ÷*/
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define lc u<<1
#define rc u<<1|1
const int INF = 0x3f3f3f3f, MAXN = 100000+10, MOD = 1000000007;
struct NODE{
	int x,y,sum;
}node[MAXN<<2];
int b[MAXN],num[MAXN];

inline void push_up(int u)
{
	node[u].sum = (node[lc].sum+node[rc].sum)%MOD;
}
void bulid(int u, int x, int y)
{
	node[u].x = x, node[u].y = y;
	node[u].sum = 0;
	if(x == y)
	{
		return;
	}
	int m = (x+y)>>1;
	bulid(lc,x,m);
	bulid(rc,m+1,y);
	//push_up(u);
}
int p,v;
void update(int u)
{
	int x = node[u].x, y = node[u].y;
	if(x == y)
	{
		node[u].sum = (node[u].sum+v)%MOD;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m)
		update(lc);
	else
		update(rc);
	push_up(u);
}
int ql,qr;
int query(int u)
{
	int x = node[u].x, y = node[u].y;
	if(ql <= x && y <= qr) return node[u].sum;
	int m = (x+y)>>1, ans = 0;
	if(ql <= m)
		ans = (ans+query(lc))%MOD;
	if(qr > m)
		ans = (ans+query(rc))%MOD;
	return ans;
}
inline bool cmp(int x, int y){
	if(b[x] != b[y])
		return b[x] < b[y];
	return x < y;
}

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n;
	while(~scanf("%d%*c", &n))
	{
		repe(i,1,n)
			scanf("%d%*c", &b[i]), num[i] = i;
		bulid(1,1,n);
		sort(num+1,num+1+n,cmp);
		//unique(num+1,num+1+n);
		repe(i,1,n)
		{
			ql = 1, qr = num[i];
			v = query(1)+1;
			p = num[i];
			update(1);
		}
		ql = 1, qr = n;
		printf("%d\n", query(1));
	}
	return 0;
}
============================================================================================================

/*Ê÷×´Êý×é*/
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define lc u<<1
#define rc u<<1|1
const int INF = 0x3f3f3f3f, MAXN = 100000+10, MOD = 1000000007;
int b[MAXN],num[MAXN], sum[MAXN], n;

inline int lowbit(int x){return x&-x;}
int query(int x)
{
	int ans = 0;
	while(x > 0)
	{
		ans = (ans+sum[x])%MOD;
		x -= lowbit(x);
	}
	return ans;
}
void update(int x, int val)
{
	while(x <= n)
	{
		sum[x] = (sum[x]+val)%MOD;
		x += lowbit(x);
	}
}
inline bool cmp(int x, int y){
	if(b[x] != b[y])
		return b[x] < b[y];
	return x < y;
}

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	while(~scanf("%d%*c", &n))
	{
		repe(i,1,n)
			scanf("%d%*c", &b[i]), num[i] = i;
		clc(sum,0);
		sort(num+1,num+1+n,cmp);
		repe(i,1,n)
		{
			int v = query(num[i])+1;
			update(num[i],v);
		}
		printf("%d\n", query(n));
	}
	return 0;
}
