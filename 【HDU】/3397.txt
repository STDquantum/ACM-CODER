#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define MAXN 100010
#define lc u<<1
#define rc u<<1|1
struct NODE{
	int x,y;//lmx_0最大前缀0个数,rmx后缀,mx区间最大连续1(0)个数,sum1是区间内1的总数
	int lmx_0, lmx_1, rmx_0, rmx_1, mx1, mx0, sum1;
	int setv, xor;//lazy
}node[MAXN<<2];
int a[MAXN];

void push_up(NODE &fa, const NODE &a, const NODE &b)
{
	fa.sum1 = a.sum1+b.sum1;//update sum1
	// update mx
	fa.mx1 = max(a.mx1, b.mx1);
	fa.mx1 = max(fa.mx1, a.rmx_1+b.lmx_1);
	fa.mx0 = max(a.mx0, b.mx0);
	fa.mx0 = max(fa.mx0, a.rmx_0+b.lmx_0);
	//update lmx_
	fa.lmx_1 = a.lmx_1;
	if(a.lmx_1 == a.y-a.x+1) fa.lmx_1 += b.lmx_1;
	fa.lmx_0 = a.lmx_0;
	if(a.lmx_0 == a.y-a.x+1) fa.lmx_0 += b.lmx_0;
	//update rmx_
	fa.rmx_1 = b.rmx_1;
	if(b.rmx_1 == b.y-b.x+1) fa.rmx_1 += a.rmx_1;
	fa.rmx_0 = b.rmx_0;
	if(b.rmx_0 == b.y-b.x+1) fa.rmx_0 += a.rmx_0;
}
void bulid(int u, int x, int y)
{
	node[u].x = x, node[u].y = y;
	node[u].setv = -1, node[u].xor = 0;
	if(x == y)
	{
		node[u].mx0 = node[u].lmx_0 = node[u].rmx_0 = !a[x];
		node[u].mx1 = node[u].lmx_1 = node[u].rmx_1 = node[u].sum1 = a[x];
		return;
	}
	int m = (x+y)>>1;
	bulid(lc,x,m);
	bulid(rc,m+1,y);
	push_up(node[u], node[lc], node[rc]);
}
void dw_set(NODE &a, int setv)
{
	a.setv = setv;
	a.xor = 0;
	a.rmx_0 = a.mx0 = a.lmx_0 = (!setv)*(a.y-a.x+1);
	a.sum1 = a.rmx_1 = a.mx1 = a.lmx_1 = setv*(a.y-a.x+1);
}
void dw_xor(NODE &a)
{
	a.xor = !a.xor;
	a.sum1 = a.y-a.x+1-a.sum1;
	swap(a.lmx_0, a.lmx_1);
	swap(a.mx0, a.mx1);
	swap(a.rmx_0, a.rmx_1);
}
void push_down(int u)
{
	if(~node[u].setv)
	{
		dw_set(node[lc], node[u].setv);
		dw_set(node[rc], node[u].setv);
		node[u].setv = -1;
	}
	if(node[u].xor)
	{
		dw_xor(node[lc]);
		dw_xor(node[rc]);
		node[u].xor = 0;
	}
}
int op, ql,qr;
void update(int u)
{
	int x = node[u].x, y = node[u].y;
	if(ql <= x && y <= qr)
	{
		if(2 == op)
			dw_xor(node[u]);
		else 
			dw_set(node[u], op);
		return;
	}
	push_down(u);
	int m = (x+y)>>1;
	if(ql <= m) update(lc);
	if(qr > m) update(rc);
	push_up(node[u], node[lc], node[rc]);
}
NODE query(int u)
{
	int x = node[u].x, y = node[u].y;
	if(ql <= x && y <= qr) return node[u];
	push_down(u);
	int m = (x+y)>>1;
	NODE ans;
	if(ql <= m && qr > m) push_up(ans,query(lc),query(rc));
	else if(ql <= m) ans = query(lc);
	else if(qr > m) ans =query(rc);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n,m;
		scanf("%d %d%*c", &n, &m);
		repe(i,1,n) scanf("%d%*c", &a[i]);
		bulid(1,1,n);
		rep(i,0,m)
		{
			scanf("%d %d %d%*c", &op, &ql, &qr);
			ql++, qr++;
			if(op <= 2)
				update(1);
			else
			{
				NODE ans = query(1);
				if(3 == op) printf("%d\n", ans.sum1);
				else printf("%d\n", ans.mx1);
			}
		}
	}
	return 0;
}
