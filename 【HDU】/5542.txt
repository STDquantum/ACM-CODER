#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10, MOD = 1000000007;
int dp[MAXN][MAXN],a[MAXN],sot[MAXN],mx;

struct Tree{
	int cnt[MAXN];
	void init()
	{
		clc(cnt,0);
	}
	int lowbit(int x){return x&-x;}
	void add(int x, int v)
	{
		while(x <= mx)
		{
			cnt[x] = (cnt[x]+v)%MOD;
			x += lowbit(x);
		}
	}
	int query(int x)
	{
		int ans = 0;
		while(x > 0)
		{
			ans = (ans+cnt[x])%MOD;
			x -= lowbit(x);
		}
		return ans;
	}
}tree[MAXN];

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t,count = 0;
	scanf("%d", &t);
	while(t--)
	{
		int n,m;
		scanf("%d%d", &n,&m);
		repe(i,1,n) scanf("%d", &a[i]),sot[i] = a[i];
		sort(sot+1,sot+1+n);
		mx = unique(sot+1,sot+1+n)-sot-1;
		repe(i,1,n) a[i] = lower_bound(sot+1,sot+1+mx,a[i])-sot,tree[i].init();
		clc(dp,0);
		repe(i,1,n)
		{
			repe(j,1,m)
			{
				if(j == 1) dp[i][j] = 1;
				else dp[i][j] = tree[j-1].query(a[i]-1);
				tree[j].add(a[i],dp[i][j]);
			}
		}
		int ans = 0;
		repe(i,1,n) ans = (ans+dp[i][m])%MOD;
		printf("Case #%d: %d\n", ++count,ans);
	}
	return 0;
}
