#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define MAXN 100010
#define lc u<<1
#define rc u<<1|1
struct Edge{
	int next, u, v;
	Edge(int a = 0, int b = 0, int c = 0){next = a, u = b, v = c;}
}edge[MAXN<<1];
struct P{
	int h, xl, xr, v;
	bool operator <(const P &t)const{
		return h<t.h;
	}
}p[MAXN];
struct NODE{
	int x,y,setv;
}node[MAXN<<2];
int head[MAXN], tol, dp[MAXN];

void add_edge(int u, int v)
{
	edge[tol] = Edge(head[u], u,v);
	head[u] = tol++;
}
void bulid(int u, int x, int y)
{
	node[u].x = x, node[u].y = y;
	if(x == y)
	{
		node[u].setv = 0;
		return;
	}
	int m = (x+y)>>1;
	bulid(lc,x,m);
	bulid(rc,m+1,y);
	node[u].setv = -1;
}
inline void push_down(int u)
{
	if(~node[u].setv)
	{
		node[lc].setv = node[rc].setv = node[u].setv;
		node[u].setv = -1;
	}
}
int ql,qr,v;
void update(int u)
{
	int x = node[u].x, y = node[u].y;
	if(ql <= x && y <= qr)
	{
		node[u].setv = v;
		return;
	}
	push_down(u);
	int m = (x+y)>>1;
	if(ql <= m) update(lc);
	if(qr > m) update(rc);
}
int pi;
int query(int u)
{
	int x = node[u].x, y = node[u].y;
	if(x == y) return node[u].setv;
	push_down(u);
	int m = (x+y)>>1;
	if(pi <= m) return query(lc);
	return query(rc);
}
int dfs(int u)
{
	int &ans = dp[u];
	if(~ans) return ans;
	ans = 0;
	for(int i = head[u]; ~i; i = edge[i].next)
	{
		int v = edge[i].v;
		int tmp = p[u].v+dfs(v);
		if(tmp > ans) ans = tmp; 
	}
	if(ans <= 0) ans = -INF;
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n;
	while(~scanf("%d%*c", &n))
	{
		int mx = 1;
		repe(i,1,n)
		{
			scanf("%d %d %d %d%*c", &p[i].h, &p[i].xl, &p[i].xr, &p[i].v);
			mx = max(mx,p[i].xr);
		}
		sort(p+1,p+1+n);
		clc(head,-1);
		tol = 0;
		bulid(1,1,mx);
		repe(i,1,n)
		{
			pi = p[i].xl;
			add_edge(query(1),i);
			pi = p[i].xr;
			add_edge(query(1),i);
			ql = p[i].xl, qr = p[i].xr, v = i;
			update(1);
		}
		clc(dp,-1);
		dp[n] = 100+p[n].v;
		int ans = dfs(0);
		if(ans < 0) ans = -1;
		printf("%d\n", ans);
	}
	return 0;
}
