#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 200*500+10, MAXM = 10000+10, MAXSIZE = 130;
struct Trie{
	int ch[MAXN][MAXSIZE], fail[MAXN], num[MAXN], cnt;
	int newnode()
	{
		clc(ch[cnt],-1);
		num[cnt++] = -1;
		return cnt-1;
	}
	void init()
	{
		cnt = 0;
		newnode();
	}
	void insert(char *s, int p)
	{
		int len = strlen(s), u = 0;
		rep(i,0,len)
		{
			int &c = ch[u][s[i]];
			if(-1 == c)
				c = newnode();
			u = c;
		}
		num[u] = p;
	}
	void get_fail()
	{
		queue<int> q;
		fail[0] = 0;
		rep(i,0,MAXSIZE)
		{
			int &c = ch[0][i];
			if(~c)
			{
				fail[c] = 0;
				q.push(c);
			}
			else c = 0;
		}
		while(!q.empty())
		{
			int u = q.front();q.pop();
			rep(i,0,MAXSIZE)
			{
				int &c = ch[u][i];
				int p = ch[fail[u]][i];
				if(~c)
				{
					fail[c] = p;
					q.push(c);
				}
				else
					c = p;
			}
		}
	}
	vector<int> ans;
	bool query(char *s)
	{
		int len = strlen(s), u = 0;
		ans.clear();
		bool vis[501]={0};
		rep(i,0,len)
		{
			u = ch[u][s[i]];
			int temp = u;
			while(temp)
			{
				if(~num[temp] && !vis[num[temp]]) ans.push_back(num[temp]), vis[num[temp]] = true;
				temp = fail[temp];
			}
		}
		if(0 != ans.size())
		{
			sort(ans.begin(),ans.end());
			return true;
		}
		return false;
	}
}ac;

char a[MAXM];
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n;
	scanf("%d%*c", &n);
	ac.init();
	repe(i,1,n)
	{
		gets(a);
		ac.insert(a,i);
	}
	ac.get_fail();
	int m, ans = 0;
	scanf("%d%*c", &m);
	repe(i,1,m)
	{
		gets(a);
		if(ac.query(a))
		{
			printf("web %d:",i);
			rep(j,0,ac.ans.size()) printf(" %d",ac.ans[j]);
			putchar('\n');
			ans++;
		}
	}
	printf("total: %d\n", ans);
	return 0;
}
