#include <bits/stdc++.h>
using namespace std;
typedef unsigned long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f;
struct NODE{
	int a[10],cnt[10],len;
	bool operator<(const NODE &t)const{
		if(len != t.len) return len < t.len;
		rep(i,0,len)
		{
			if(a[i] != t.a[i]) return a[i] < t.a[i];
			if(cnt[i] != t.cnt[i]) return cnt[i] < t.cnt[i];
		}
		return false;
	}
	bool operator == (const NODE &t)const{
		if(len != t.len) return false;
		rep(i,0,len)
		{
			if(a[i] != t.a[i]) return false;
			if(cnt[i] != t.cnt[i]) return false;
		}
		return true;
	}
}st,ed;

void get_f(int n)
{
	st.len = 0;
	clc(st.cnt,0);
	int mx = sqrt(n+0.5);
	repe(i,2,mx)
	{
		if(0 == n%i)
		{
			while(0 == n%i)
			{
				st.cnt[st.len]++;
				n /= i;
			}
			st.a[st.len++] = i;
		}
		if(n < i) break;
	}
	if(n > 1)
	{
		st.cnt[st.len]++;
		st.a[st.len++] = n;
	}
}
bool get_ed(LL n)
{
	ed.len = 0;
	clc(ed.cnt,0);
	rep(i,0,st.len)
	{
		if(0 == n%st.a[i])
		{
			while(0 == n%st.a[i])
			{
				ed.cnt[ed.len]++;
				n /= st.a[i];
			}
			ed.a[ed.len++] = st.a[i];
		}
		if(n < i) break;
	}
	return n == 1;
}
int get_cnt(int s, int n)
{
	int ans = 0;
	while(s < n)
	{
		ans++;
		s <<= 1;
	}
	return ans;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	while(t--)
	{
		int n;
		LL m;
		scanf("%d %I64u", &n, &m);
		get_f(n);
		if(n == m)
		{
			puts("0");
			continue;
		}
		if(n > m || !get_ed(m))
		{
			puts("-1");
			continue;
		}
		int ans = 0;
		rep(i,0,ed.len)
		{
			ans = max(ans, get_cnt(st.cnt[i],ed.cnt[i]));
		}
		printf("%d\n", ans);
	}
	return 0;
}