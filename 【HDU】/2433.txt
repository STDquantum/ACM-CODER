#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
#define MAXN 105
#define INF 0x3f3f3f3f
struct E{
	int from, to;
	E(int a, int b){from = a, to = b;}
};
vector<E> edge;
vector<int> g[MAXN];
bool vis[MAXN];
int n,sum, map[MAXN][MAXN],init,dp[MAXN],p[MAXN][MAXN], tol[MAXN];
queue<int> q;

void dfs(int u)
{
	vis[u] = true;
	sum++;
	int len = g[u].size();
	for(int i = 0; i < len; i++)
	{
		if(!vis[g[u][i]] && map[u][g[u][i]])
			dfs(g[u][i]);
	}
}
bool ok()
{
	sum = 0;
	memset(vis,0,sizeof(vis));
	dfs(1);
	return sum == n;
}
int bfs(int st)
{
	int ans = 0;
	memset(vis,0,sizeof(vis));
	q.push(st);
	dp[st] = 0;
	vis[st] = true;
	while(!q.empty())
	{
		int u = q.front();q.pop();
		int len = g[u].size();
		for(int i = 0; i < len; i++)
		{
			int to = g[u][i];
			if(!vis[to] && map[u][to])
			{
				dp[to] = dp[u]+1;
				ans += dp[to];
				vis[to] = true;
				p[st][to] = u;
				q.push(to);
			}
		}
	}
	return ans;
}
int up_bfs(int st)
{
	int ans = 0;
	memset(vis,0,sizeof(vis));
	q.push(st);
	dp[st] = 0;
	vis[st] = true;
	while(!q.empty())
	{
		int u = q.front();q.pop();
		int len = g[u].size();
		for(int i = 0; i < len; i++)
		{
			int to = g[u][i];
			if(!vis[to] && map[u][to])
			{
				dp[to] = dp[u]+1;
				ans += dp[to];
				vis[to] = true;
				q.push(to);
			}
		}
	}
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt","r",stdin);
#endif
	int m;
	while(~scanf("%d %d%*c", &n, &m))
	{
		int a,b;
		memset(map,0,sizeof(map));
		memset(tol,0,sizeof(tol));
		for(int i = 1; i <= n; i++) g[i].clear();
		edge.clear();
		for(int i = 0; i < m; i++)
		{
			scanf("%d %d%*c", &a, &b);
			edge.push_back(E(a,b));
			if(!map[a][b]) g[a].push_back(b),g[b].push_back(a);
			map[a][b]++,map[b][a]++;
		}
		if(!ok())
		{
			for(int i = 0; i < m; i++) puts("INF");
			continue;
		}
		int init = 0;
		for(int i = 1; i <= n; i++)
		{
			tol[i] = bfs(i);
			init += tol[i];
		}
		for(int i = 0; i < m; i++)
		{
			a = edge[i].from, b = edge[i].to;
			if(map[a][b] > 1)
			{
				printf("%d\n",init);
				continue;
			}
			map[a][b]--,map[b][a]--;
			if(!ok())
			{
				puts("INF");
				map[a][b]++,map[b][a]++;
				continue;
			}
			int ans = 0;
			for(int i = 1; i <= n; i++)
			{
				if(p[i][a] == b || p[i][b] == a)
					ans += up_bfs(i);
				else
					ans += tol[i];
			}
			printf("%d\n", ans);
			map[a][b]++,map[b][a]++;
		}
	}
	return 0;
}