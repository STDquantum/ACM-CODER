#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 300000+10, MAXM = 300000+10, MAXIN = 50000;
char buf[MAXIN], *ps = buf, *pe = buf+1;
inline void rnext(){
	if(++ps == pe) pe = (ps = buf)+fread(buf,sizeof(char),sizeof(buf)/sizeof(char),stdin);
}
template <class T>
inline bool in(T &ans)
{
	ans = 0;
	T f = 1;
	if(ps == pe) return false;
	do{ rnext(); if('-' == *ps) f = -1;} while(!isdigit(*ps) && ps != pe);
	if(ps == pe) return false;
	do{ ans = (ans<<1)+(ans<<3)+*ps-48;rnext();}while(isdigit(*ps) && ps != pe);
	ans *= f;
	return true;
}

struct EDGE{
	int u,v,w;
}edge[MAXM];
int f[MAXN],n,m;
bool del[MAXM];

int find(int x){return x == f[x]?x:f[x] = find(f[x]);}
bool ok(int p)
{
	int cnt = n;
	repe(i,1,n) f[i] = i;
	rep(i,0,m)
	{
		if(del[i] || !(edge[i].w&(1<<p))) continue;
		int x = find(edge[i].u),y = find(edge[i].v);
		if(x != y)
		{
			f[x] = y;
			if(--cnt == 1) return true;
		}
	}
	return false;
}
void del_not1(int p)
{
	rep(i,0,m)
	{
		if(del[i] || edge[i].w&(1<<p)) continue;
		del[i] = true;
	}
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	in(t);
	while(t--)
	{
		int mx = 0;
		in(n);in(m);
		rep(i,0,m)
		{
			in(edge[i].u);in(edge[i].v);in(edge[i].w);
			mx = max(mx,edge[i].w);
		}
		clc(del,0);
		int cnt = 0;
		while(mx)
		{
			cnt++;
			mx >>= 1;
		}
		int ans = 0;
		per(i,cnt-1,0)
		{
			if(ok(i))
			{
				ans |= 1<<i;
				del_not1(i);
			}
		}
		printf("%d\n", ans);
	}
	return 0;
}
