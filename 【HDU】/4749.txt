#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <bitset>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10;
char buf[MAXN], *ps = buf, *pe = buf+1;
inline void rnext(){
	if(++ps == pe)
		pe = (ps = buf)+fread(buf,sizeof(char),sizeof(buf)/sizeof(char),stdin);
}
template <class T>
inline bool in(T &ans)
{
	ans = 0;
	T f = 1;
	if(ps == pe) return false;//EOF
	do{
		rnext();
		if('-' == *ps) f = -1;
	}while(!isdigit(*ps) && ps != pe);
	if(ps == pe) return false;//EOF
	do
	{
		ans = (ans<<1)+(ans<<3)+*ps-48;
		rnext();
	}while(isdigit(*ps) && ps != pe);
	ans *= f;
	return true;
}
int nt[MAXN], sum[2][MAXN][30];
int get_small(int p, int st, int ed,int v)
{
	int cnt = 0;
	rep(i,1,v) cnt += sum[p][ed+1][i]-sum[p][st][i];
	return cnt;
}
bool equal(int p, int st, int ed,int v1, int p2, int st2, int ed2,int v2)
{
	return (sum[p][ed+1][v1]-sum[p][st][v1] == sum[p2][ed2+1][v2]-sum[p2][st2][v2]) && (get_small(p,st,ed,v1) == get_small(p2,st2,ed2,v2));
}
void get_next(int *x, int m)
{
	int i = 0,j;
	j = nt[0] = -1;
	while(i < m)
	{
		while(~j && !equal(1,0,j,x[i],1,0,j,x[j])) 
			j = nt[j];
		nt[++i] = ++j;
	}
}
int kmp(int *x, int m, int *y, int n)
{
	int i = 0,j = 0,ans = 0;
	get_next(x,m);
	while(i < n)
	{
		while(~j && !equal(0,i-j,i,y[i],1,0,j,x[j])) j = nt[j];
		i++,j++;
		if(j == m)
		{
			ans++;
			j = 0;
		}
	}
	return ans;
}
int a[MAXN],b[MAXN];

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int n,m,k;
	while(in(n))
	{
		in(m);in(k);
		clc(sum,0);
		rep(i,0,n) in(a[i]), sum[0][i+1][a[i]] = 1;
		rep(i,0,m) in(b[i]), sum[1][i+1][b[i]] = 1;
		repe(i,1,n)
		{
			repe(j,1,k)
				sum[0][i][j] += sum[0][i-1][j];
		}
		repe(i,1,m)
		{
			repe(j,1,k)
				sum[1][i][j] += sum[1][i-1][j];
		}
		printf("%d\n",kmp(b,m,a,n));
	}
	return 0;
}
