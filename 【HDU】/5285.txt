#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10, MAXM = MAXN*2;
char buf[MAXN*2], *ps = buf, *pe = buf+1;
inline void rnext(){
	if(++ps == pe)
		pe = (ps = buf)+fread(buf,1,sizeof(buf),stdin);
}
inline int in()
{
	int ans = 0;
    if(ps == pe) return -1;
	do{
		rnext();
	}while(!isdigit(*ps) && ps != pe);
	if(ps == pe) return -1;
	do
	{
		ans = (ans<<1)+(ans<<3)+*ps-48;
		rnext();
	}while(isdigit(*ps) && ps != pe);
	return ans;
}
int head[MAXN], nxt[MAXM], to[MAXM],tol;

void add_edge(int u, int v)
{
	nxt[tol] = head[u], to[tol] = v;
	head[u] = tol++;
}
int col[MAXN],n,m;
bool dfs(int u, int c,int& s0, int& s1)
{
	if(col[u]) s1++;
	else s0++;
	for(int i = head[u]; ~i; i = nxt[i])
	{
		int v = to[i];
		if(~col[v] && col[v] == c) return false;
		if(~col[v]) continue;
		col[v] = c^1;
		if(!dfs(v,c^1,s0,s1)) return false;
	}
	return true;
}
bool sloved(int &cnt)
{
	clc(col,-1);
	cnt = 0;
	repe(i,1,n)
	{
		if(-1 == col[i])
		{
			int s0 = 0,s1 = 0;
			col[i] = 0;
			if(!dfs(i,0,s0,s1)) return false;
			cnt += max(s0,s1);
		}
	}
	return true;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t = in();
	while(t--)
	{
		clc(head,-1);
		tol = 0;
		n = in(),m = in();
		rep(i,0,m)
		{
			int u = in(),v = in();
			add_edge(u,v);
			add_edge(v,u);
		}
		if(n < 2)
		{
			puts("Poor wyh");
			continue;
		}
		if(0 == m)
		{
			printf("%d %d\n",n-1,1);
			continue;
		}
		int cnt;
		if(sloved(cnt))
		{
			int mx = cnt, mi = n-cnt;
			if(mx < mi) swap(mx,mi);
			printf("%d %d\n",mx,mi);
		}
		else puts("Poor wyh");
	}
	return 0;
}
