#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define lc u<<1
#define rc u<<1|1
const int INF = 0x3f3f3f3f, MAXN = 50000+10;
struct NODE{
	int x,y,sum;
}node[MAXN<<2];
char a[MAXN];

void push_up(NODE &fa, NODE &l, NODE &r)
{
	fa.sum = l.sum+r.sum;
	int m = l.y;
	if(m-1 >= fa.x && m+1 <= fa.y && 'w' == a[m-1] && 'b' == a[m] && 'w' == a[m+1])
		fa.sum++;
	if(m+2 <= fa.y && 'w' == a[m] && 'b' == a[m+1] && 'w' == a[m+2])
		fa.sum++;
}
void bulid(int u, int x, int y)
{
	node[u].x = x, node[u].y = y;
	if(x == y)
	{
		node[u].sum = 0;
		return;
	}
	int m = (x+y)>>1;
	bulid(lc,x,m);
	bulid(rc,m+1,y);
	push_up(node[u], node[lc], node[rc]);
}
int p;
char ch;
void update(int u)
{
	int x = node[u].x, y = node[u].y;
	if(x == y)
	{
		a[x] = ch;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m) update(lc);
	else update(rc);
	push_up(node[u], node[lc], node[rc]);
}
int ql,qr;
NODE query(int u)
{
	int x = node[u].x, y = node[u].y;
	if(ql <= x && y <= qr) return node[u];
	int m = (x+y)>>1;
	if(ql <= m && qr > m)
	{
		NODE ans,l = query(lc), r = query(rc);
		ans.x = l.x, ans.y = r.y;
		push_up(ans,l,r);
		return ans;
	}
	if(ql <= m) return query(lc);
	if(qr > m) return query(rc);
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t, count = 0;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n,m;
		scanf("%d %d%*c", &n, &m);
		rep(i,0,n) a[i] = getchar();
		getchar();
		bulid(1,0,n-1);
		int op;
		printf("Case %d:\n", ++count);
		rep(i,0,m)
		{
			scanf("%d%*c", &op);
			if(op)
			{
				scanf("%d %c%*c", &p, &ch);
				update(1);
			}
			else
			{
				scanf("%d %d%*c", &ql, &qr);
				NODE ans = query(1);
				printf("%d\n", ans.sum);
			}
		}
	}
	return 0;
}
