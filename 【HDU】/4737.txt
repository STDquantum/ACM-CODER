#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10;
int a[MAXN], sum[MAXN<<1];

inline int id(int x, int y){return x+y|x!=y;}
void update(int x, int y, int p, int v)
{
	if(x == y)
	{
		sum[id(x,y)] = v;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m) update(x,m,p,v);
	else update(m+1,y,p,v);
	sum[id(x,y)] = sum[id(x,m)]|sum[id(m+1,y)];
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t,count = 0;
	scanf("%d", &t);
	while(t--)
	{
		int n,m;
		scanf("%d %d", &n, &m);
		repe(i,1,n) scanf("%d", &a[i]);
		clc(sum,0);
		int ed = 0, rt = id(1,n);
		LL ans = 0;
		repe(i,1,n)
		{
			update(1,n,i-1,0);
			if(ed < n) ed = i-1;
			while(ed < n && (sum[rt]|a[ed+1]) < m)
			{
				update(1,n,ed,a[++ed]);
			}
			ans += ed-i+1;
		}
		printf("Case #%d: %I64d\n", ++count,ans);
	}
	return 0;
}
