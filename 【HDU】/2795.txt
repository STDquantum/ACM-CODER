#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
#define INF 0x3f3f3f3f
#define MAXN 200010
#define lc u<<1
#define rc u<<1|1
struct NODE{
	int x,y;
	int max;
}node[MAXN<<2];
int w;

void bulid(int u, int x, int y)
{
	node[u].x = x, node[u].y = y;
	if(x == y)
	{
		node[u].max = w;
		return;
	}
	int m = (x+y)>>1;
	bulid(lc,x,m);
	bulid(rc,m+1,y);
	node[u].max = max(node[lc].max,node[rc].max);
}
int si, len;
bool query(int u)
{
	int x = node[u].x, y = node[u].y;
	if(x == y)
	{
		si = x;
		return true;
	}
	if(node[lc].max >= len && query(lc))
		return true;
	if(node[rc].max >= len && query(rc))
		return true;
	return false;
}
void update(int u)
{
	int x = node[u].x, y = node[u].y;
	if(x == y)
	{
		node[u].max -= len;
		return;
	}
	int m = (x+y)>>1;
	if(si <= m) update(lc);
	else update(rc);
	node[u].max = max(node[lc].max, node[rc].max);
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int h,n;
	while(~scanf("%d %d %d%*c", &h, &w, &n))
	{
		if(h>200000)h=200000;
		bulid(1,1,h);
		repe(i,1,n)
		{
			scanf("%d%*c", &len);
			if(query(1))
			{
				update(1);
				printf("%d\n", si);
			}
			else puts("-1");
		}
	}
	return 0;
}
