#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
inline int id(int x, int y){return x+y|x!=y;}
const int INF = 0x3f3f3f3f, MAXN = 100000+10, MOD = 10007;
int sum[MAXN<<1][3], mul[MAXN<<1], add[MAXN<<1];

inline void push_up(int x, int y, int m)
{
	int u = id(x,y), l = id(x,m), r = id(m+1,y);
	rep(i,0,3) sum[u][i] = (sum[l][i]+sum[r][i])%MOD;
}
inline int pow_2(int a){
	return a*a%MOD;
}
inline int pow_3(int a){
	return pow_2(a)*a%MOD;
}
void push_mul(int u, int v)
{
	mul[u] = mul[u]*v%MOD;
	add[u] = add[u]*v%MOD;
	sum[u][0] = sum[u][0]*v%MOD;
	sum[u][1] = sum[u][1]*pow_2(v)%MOD;
	sum[u][2] = sum[u][2]*pow_3(v)%MOD;
}
void push_add(int u, int len, int v)
{
	add[u] = (add[u]+v)%MOD;
	sum[u][2] = (sum[u][2]+len*pow_3(v)+v*sum[u][1]%MOD*3+pow_2(v)*sum[u][0]%MOD*3)%MOD;
	sum[u][1] = (sum[u][1]+len*pow_2(v)+2*v*sum[u][0]%MOD)%MOD;
	sum[u][0] = (sum[u][0]+v*len%MOD)%MOD;
}
void push_down(int x, int y, int m)
{
	int u = id(x,y);
	if(1 != mul[u])
	{
		push_mul(id(x,m),mul[u]);
		push_mul(id(m+1,y),mul[u]);
		mul[u] = 1;
	}
	if(add[u])
	{
		push_add(id(x,m),m-x+1,add[u]);
		push_add(id(m+1,y),y-m,add[u]);
		add[u] = 0;
	}
}
int op,ql,qr,v;
void update(int x, int y)
{
	if(ql <= x && y <= qr)
	{
		int u = id(x,y);
		/*if(x == y)
		{
			if(1 == op)
				sum[u][0] = (sum[u][0]+v)%MOD;
			else if(2 == op)
				sum[u][0] = (sum[u][0]*v)%MOD;
			else
				sum[u][0] = v;
			sum[u][1] = pow_2(sum[u][0]);
			sum[u][2] = pow_3(sum[u][0]);
			return;
		}*/
		if(1 == op) push_add(u,y-x+1,v);
		else if(2 == op) push_mul(u,v);
		else
		{
			push_mul(u,0);
			push_add(u,y-x+1,v);
		}
		return;
	}
	int m = (x+y)>>1;
	push_down(x,y,m);
	if(ql <= m) update(x,m);
	if(qr > m) update(m+1,y);
	push_up(x,y,m);
}
int query(int x, int y)
{
	if(ql <= x && y <= qr) return sum[id(x,y)][v-1];
	int m = (x+y)>>1, ans = 0;
	push_down(x,y,m);
	if(ql <= m) ans += query(x,m), ans %= MOD;
	if(qr > m) ans += query(m+1,y), ans %= MOD;
	return ans;
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n,m;
	while(~scanf("%d %d%*c", &n, &m) && n+m)
	{
		clc(add,0);
		clc(sum,0);
		repe(i,0,n<<1) mul[i] = 1;
		rep(i,0,m)
		{
			scanf("%d %d %d %d%*c", &op, &ql, &qr, &v);
			if(4 == op) printf("%d\n", query(1,n));
			else update(1,n);
		}
	}
	return 0;
}
