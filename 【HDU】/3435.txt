/*mcmf*/
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000*2+10, MAXM = 20000*2+10;
int n;
struct Edge{
    int next,from, to, cap, flow, cost;
    Edge(int nt = 0,int a = 0, int b = 0, int c = 0, int d = 0, int e = 0){
        next = nt,from = a, to = b, cap = c, flow = d, cost = e;
    }
}edge[MAXM<<1];//记得多开一倍边数(有反向边)
int tol,head[MAXN];
bool inq[MAXN];
int d[MAXN]/*spfa*/, p[MAXN]/*上一条弧*/, a[MAXN]/*可改进量*/;
void init(){
    tol = 0;
    clc(head,-1);
}
void add_edge(int from, int to, int cap, int cost)
{
    edge[tol] = Edge(head[from],from,to,cap,0,cost);
    head[from] = tol++;
    edge[tol] = Edge(head[to],to,from,0,0,-cost);
    head[to] = tol++;
}
bool spfa(int s, int t, int& flow, LL& cost)
{
    memset(d,0x3f,sizeof(d));
    memset(inq,0,sizeof(inq));
    d[s] = 0, inq[s] = true, p[s] = 0, a[s] = INF;
    queue<int> q;
    q.push(s);
    while(!q.empty())
    {
        int u = q.front();q.pop();
        inq[u] = false;
        for(int i = head[u]; ~i; i = edge[i].next)
        {
            Edge& e = edge[i];
            if(e.cap > e.flow && d[e.to] > d[u]+e.cost)
            {
                d[e.to] = d[u]+e.cost;
                p[e.to] = i;
                a[e.to] = min(a[u], e.cap-e.flow);
                if(!inq[e.to]) q.push(e.to), inq[e.to] = true;
            }
        }
    }
    if(INF == d[t]) return false;
    flow += a[t];
    cost += (LL)d[t]*(LL)a[t];
    for(int u = t; u != s; u = edge[p[u]].from)
    {
        edge[p[u]].flow += a[t];
        edge[p[u]^1].flow -= a[t];
    }
    return true;
}
//需要保证初始网络没有负圈，返回最大流量，cost才是最小花费
int mincostmaxflow(int s, int t, LL & cost)
{
    int flow = 0;
    cost = 0;
    while(spfa(s,t,flow,cost));
    return flow;
}
int cost[1010][1010];

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t, count = 0;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n,m;
		scanf("%d %d%*c", &n, &m);
		init();
		clc(cost,0x3f);
		rep(i,0,m)
		{
			int a,b,c;
			scanf("%d %d %d%*c", &a, &b, &c);
			cost[a][b] = cost[b][a] = min(cost[a][b], c);
		}
		repe(i,1,n)
		{
			repe(j,i+1,n)
			{
				if(INF != cost[i][j]) 
				{
					add_edge(i,j+n,1,cost[i][j]);
					add_edge(j,i+n,1,cost[i][j]);
				}
			}
		}
		int st = 0,ed = n*2+1;
		repe(i,1,n) add_edge(st,i,1,0), add_edge(i+n,ed,1,0);
		LL ans;
		printf("Case %d: ", ++count);
		if(mincostmaxflow(st,ed,ans) != n) puts("NO");
		else printf("%I64d\n", ans);
	}
	return 0;
}
=====================================================================================
/*km二分权匹配*/
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10;
int g[MAXN][MAXN];//二分图描述,纵坐标为左边，横坐标为右边，这里下标从1开始的
struct KM{
    struct NODE{
        int to,w;
        NODE(int a, int b){
            to = a, w = b;
        }
    };
    int nx,ny;//两边的点数
    int linker[MAXN],lx[MAXN],ly[MAXN];//y中各点匹配状态，x,y中的点标号
    int slack[MAXN];
    bool visx[MAXN],visy[MAXN];
    bool dfs(int x)
    {
        visx[x] = true;
        repe(y,1,ny)
        {
            if(visy[y]) continue;
            int tmp = lx[x]+ly[y]-g[x][y];
            if(!tmp)
            {
                visy[y] = true;
                if(-1 == linker[y] || dfs(linker[y]))
                {
                    linker[y] = x;
                    return true;
                }
            }
            else if(slack[y] > tmp)
                slack[y] = tmp;
        }
        return false;
    }
    int max_km(int nx, int ny)//传入两边点数
    {
        this->nx = nx, this->ny = ny;
        clc(linker,-1);
        clc(ly,0);
        repe(i,1,nx)
        {
            lx[i] = -INF;
            repe(j,1,ny)
                if(g[i][j] > lx[i]) 
                    lx[i] = g[i][j];
        }
        repe(x,1,nx)
        {
            clc(slack,0x3f);
            while(1)
            {
                clc(visx,0);
                clc(visy,0);
                if(dfs(x))break;
                int d = INF;
                repe(i,1,ny)
                {
                    if(!visy[i] && d > slack[i])
                        d = slack[i];
                }
                repe(i,1,nx) if(visx[i]) lx[i] -= d;
                repe(i,1,ny)
                {
                    if(visy[i]) ly[i] += d;
                    else slack[i] -= d;
                }
            }
        }
        //最后统计最大值，加负号就是最小值，然后要把所有g[][]*-1
        int ans = 0;
        repe(i,1,ny)
        {
            //如果求最小值就是-INF，最大值才是INF
            if(-INF == g[linker[i]][i]) return -1;//不存在完美匹配，返回-1
            if(~linker[i]) ans += g[linker[i]][i];
        }
        return -ans;
    }
}km;


int main()
{
#ifdef SHY
    freopen("e:\\1.txt", "r", stdin);
#endif
    int t,count = 0;
    scanf("%d%*c", &t);
    while(t--)
    {
        int n,m;
        scanf("%d %d%*c", &n, &m);
        clc(g,0x3f);
        rep(i,0,m)
        {
            int a,b,c;
            scanf("%d %d %d%*c", &a, &b, &c);
            g[a][b] = g[b][a] = min(g[a][b],c);
        }
        repe(i,1,n)
        {
            repe(j,1,n)
                g[i][j] = -g[i][j];
        }
		int ans = km.max_km(n,n);
		printf("Case %d: ", ++count);
		if(-1 == ans) puts("NO");
        else printf("%d\n",ans);
    }
    return 0;
}
