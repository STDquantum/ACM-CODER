#include <cstdio>
#include <cstring>
#include<string>
#include<vector>
#define MAXN 70
#define max(a,b) (a>b?a:b)
#define MAXW 501 //输入数字最长位数
using namespace std;
struct BigInteger {
	static const int BASE = 100000000;//每一个s[i]保存的最大整数
	static const int WIDTH = 8;//每一个s[i]的最大位数
	vector<int> s;
	int f;//表示正负数
	BigInteger operator = (const string& ch) // 重新定义'='赋值运算符
	{
		f = 1;
		s.clear();
		string str = ch;
		while (str.size() > 1 && '0' == str[0]) str.erase(str.begin());//删除前面的0
		int x, len = (str.length() - 1) / WIDTH + 1;
		for (int i = 0; i < len; i++)
		{
			int end = str.length() - i*WIDTH;
			int start = max(0, end - WIDTH);
			sscanf(str.substr(start, end - start).c_str(), "%d", &x);
			s.push_back(x);
		}
		return *this;
	}
	//重新定义加法
	BigInteger operator + (const BigInteger& b) const
	{
		BigInteger c;
		c.s.clear();
		for (int i = 0, g = 0; ;i++)
		{
			if (!g && i >= s.size() && i >= b.s.size()) break;
			int x = g;
			if (i < s.size()) x += s[i];
			if (i < b.s.size()) x += b.s[i];
			c.s.push_back(x % BASE);
			g = x / BASE;
		}
		return c;
	}
};
BigInteger dp[MAXN][MAXN][MAXN];

void out(BigInteger a)
{
	if (-1 == a.f) putchar('-');
	printf("%d", a.s.back());
	for (int i = a.s.size() - 2; i >= 0; i--)
	{
		char buf[20];
		sprintf(buf, "%08d", a.s[i]);//这里的几位根据WIDTH决定
		int len = strlen(buf);
		for (int j = 0; j < len; j++) putchar(buf[j]);
	}
	putchar('\n');
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt","r",stdin);
#endif
	int n;
	for (int i = 1; i <= 60; i++)
		dp[i][0][0] = "1";
	for (int i = 1; i <= 60; i++)
	{
		for (int j = 1; j <= i; j++)
		{
			for (int k = 0; k <= j; k++)
			{
				dp[i][j][k] = dp[i][j][k]+dp[i-1][j][k]+dp[i][j-1][k];
				if(k > 0)
					dp[i][j][k] = dp[i][j][k]+dp[i][j][k - 1];
			}
		}
	}
	while(~scanf("%d%*c", &n))
	{
		out(dp[n][n][n]);
		putchar('\n');
	}
	return 0;
}