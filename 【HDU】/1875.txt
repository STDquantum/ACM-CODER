#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
#define MAXN 105
#define dis(a,b) (sqrt((double)(x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b])))
struct NODE{
    int a, b;
    double v;
    bool operator <(const NODE& t){return v < t.v;}
}p[MAXN*MAXN];
int x[MAXN], y[MAXN], f[MAXN], n,m;

int find(int x){return f[x] == x ? x : f[x] = find(f[x]);}
double kruskal()
{
    for(int i = 0; i <= n; i++)f[i] = i;
    double ans = 0;
    int cnt = 1;
    sort(p,p+m);
    for(int i = 0; i < m; i++)
    {
        int a = find(p[i].a), b = find(p[i].b);
        if(a != b) ans += p[i].v, f[a] = b, cnt++; 
        if(cnt == n) break;
    }
    if(cnt < n) return -1;
    return ans;
}
int main()
{
#ifdef SHY
    freopen("e:\\1.txt","r",stdin);
#endif
    int t;
    scanf("%d%*c", &t);
    while(t--)
    {
        m = 0;
        scanf("%d%*c", &n);
        for(int i = 0; i < n; i++)
            scanf("%d %d%*c", &x[i], &y[i]);
        for(int i = 0; i < n; i++)
        {
            for(int j = i+1; j < n; j++)
            {
                p[m].v= dis(i,j);
                if(10.0 <= p[m].v && 1000.0 >= p[m].v)
                    p[m].a = i, p[m++].b = j;
            }
        }
        double ans = kruskal();
        if(ans > 0.0)
            printf("%.1lf\n", ans*100.0);
        else puts("oh!");
    }
    return 0;
}