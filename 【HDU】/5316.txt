#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
#include <bitset>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 100000+10, MAXOUT = MAXN;
char buf[MAXN], *ps = buf, *pe = buf+1;
inline void rnext(){
	if(++ps == pe)
		pe = (ps = buf)+fread(buf,1,sizeof(buf),stdin);
}
template <class T>
inline bool in(T &ans)
{
	ans = 0;
	T f = 1;
	do{
		rnext();
		if('-' == *ps) f = -1;
	}while(!isdigit(*ps) && ps != pe);
	if(ps == pe) return false;//EOF
	do
	{
		ans = (ans<<1)+(ans<<3)+*ps-48;
		rnext();
	}while(isdigit(*ps) && ps != pe);
	ans *= f;
	return true;
}
char bufout[MAXOUT], outtmp[50],*pout = bufout, *pend = bufout+MAXOUT;
inline void write()/*必须在程序结束时加 write()*/
{
	fwrite(bufout,1,pout-bufout,stdout);
	pout = bufout;
}
inline void out_char(char c){ *(pout++) = c;if(pout == pend) write();}
inline void out_str(char *s)
{
	while(*s)
	{
		*(pout++) = *(s++);
		if(pout == pend) write();
	}
}
template <class T>
inline void out_int(T x) {
	if(!x)
	{
		out_char('0');
		return;
	}
	if(x < 0) x = -x,out_char('-');
	int len = 0;
	while(x)
	{
		outtmp[len++] = x%10+48;
		x /= 10;
	}
	outtmp[len] = 0;
	for(int i = 0, j = len-1; i < j; i++,j--) swap(outtmp[i],outtmp[j]);
	out_str(outtmp);
}
int a[MAXN];

LL mx[MAXN<<1][2][2];
inline int id(int x, int y){return x+y|x!=y;}
void push_up(int x, int y, int m)
{
	int u = id(x,y), l = id(x,m), r = id(m+1,y);
	rep(i,0,2)
	{
		rep(j,0,2)
		{
			LL &ans = mx[u][i][j];
			ans = max(mx[l][i][j],mx[r][i][j]);
			ans = max(max(mx[l][i][0]+mx[r][1][j],mx[l][i][1]+mx[r][0][j]),ans);
		}
	}
}
void bulid(int x, int y)
{
	if(x == y)
	{
		int u = id(x,y);
		clc(mx[u],-0x3f);
		mx[u][x&1][x&1] = a[x];
		return;
	}
	int m = (x+y)>>1;
	bulid(x,m);
	bulid(m+1,y);
	push_up(x,y,m);
}
void update(int x, int y, int p, int v)
{
	if(x == y)
	{
		mx[id(x,y)][x&1][x&1] = v;
		return;
	}
	int m = (x+y)>>1;
	if(p <= m) update(x,m,p,v);
	else update(m+1,y,p,v);
	push_up(x,y,m);
}
struct NODE{
	LL mx[2][2];
};
NODE query(int x, int y, int ql, int qr)
{
	if(ql <= x && y <= qr)
	{
		int u = id(x,y);
		NODE ans;
		rep(i,0,2) rep(j,0,2) ans.mx[i][j] = mx[u][i][j];
		return ans;
	}
	int m = (x+y)>>1;
	NODE ans;
	if(ql <= m && qr > m)
	{
		NODE l = query(x,m,ql,qr),r = query(m+1,y,ql,qr);
		rep(i,0,2)
		{
			rep(j,0,2)
			{
				LL &tmp = ans.mx[i][j];
				tmp = max(l.mx[i][j],r.mx[i][j]);
				tmp = max(max(l.mx[i][0]+r.mx[1][j],l.mx[i][1]+r.mx[0][j]),tmp);
			}
		}
	}
	else if(ql <= m) ans = query(x,m,ql,qr);
	else ans = query(m+1,y,ql,qr);
	return ans;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	in(t);
	while(t--)
	{
		int n,q;
		in(n),in(q);
		repe(i,1,n) in(a[i]);
		bulid(1,n);
		while(q--)
		{
			int op,x,y;
			in(op),in(x),in(y);
			if(op) update(1,n,x,y);
			else
			{
				NODE ans = query(1,n,x,y);
				LL mx = ans.mx[0][0];
				rep(i,0,2) rep(j,0,2) mx = max(mx,ans.mx[i][j]);
				out_int(mx),out_char('\n');
			}
		}
	}
	write();
	return 0;
}
