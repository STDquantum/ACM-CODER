#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10, MAXM = 4000+10;
LL dp[2][MAXM][3];//dp[i][j][k]前i个背包容量为j用了k个半长段时获得的最大价值
LL w[MAXN],v[MAXN];

int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t,count = 0;
	scanf("%d", &t);
	while(t--)
	{
		int n,m;
		scanf("%d%d", &n, &m);
		LL mx = 0;
		repe(i,1,n)
		{
			scanf("%I64d%I64d",&w[i],&v[i]);
			mx = max(mx, v[i]);
			w[i] *= 2;
		}
		clc(dp,0);
		int id = 0;
		m *= 2;
		repe(i,1,n)
		{
			id ^= 1;
			memcpy(dp[id],dp[id^1],sizeof(dp[id]));
			LL hf = w[i]>>1;
			repe(j,hf,m)
			{
				dp[id][j][1] = max(dp[id][j][1], dp[id^1][j-hf][0]+v[i]);
				dp[id][j][2] = max(dp[id][j][2], dp[id^1][j-hf][1]+v[i]);
				if(j >= w[i])
				{
					rep(k,0,3)
						dp[id][j][k] = max(dp[id][j][k], dp[id^1][j-w[i]][k]+v[i]);
				}
			}
		}
		printf("Case #%d: %I64d\n", ++count, max(max(dp[id][m][0],dp[id][m][1]),max(dp[id][m][2],mx)));
	}
	return 0;
}
