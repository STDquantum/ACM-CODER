#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 30+5;
char a[MAXN], b[MAXN];
int dp[MAXN][MAXN];
LL cnt[MAXN][MAXN];

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t,count = 0;
	scanf("%d%*c", &t);
	while(t--)
	{
		gets(a+1);
		gets(b+1);
		int lena = strlen(a+1), lenb = strlen(b+1);
		clc(dp,0);
		clc(cnt,0);
		repe(i,0,lena) cnt[i][0] = 1;
		repe(i,0,lenb) cnt[0][i] = 1;
		repe(i,1,lena)
		{
			repe(j,1,lenb)
			{
				if(a[i] == b[j])
				{
					dp[i][j] = dp[i-1][j-1]+1;
					cnt[i][j] = cnt[i-1][j-1];
				}
				else
				{
					if(dp[i-1][j] == dp[i][j-1])
						dp[i][j] = dp[i-1][j], cnt[i][j] = cnt[i-1][j]+cnt[i][j-1];
					else if(dp[i-1][j] < dp[i][j-1])
						dp[i][j] = dp[i][j-1], cnt[i][j] = cnt[i][j-1];
					else
						dp[i][j] = dp[i-1][j], cnt[i][j] = cnt[i-1][j];
				}
			}
		}
		printf("Case #%d: %d %lld\n", ++count,lena+lenb-dp[lena][lenb], cnt[lena][lenb]);
	}
	return 0;
}
