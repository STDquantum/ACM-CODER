#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 10000+10;
struct P{
	int x,y,w;
	bool operator<(const P&t)const{
		return x < t.x;
	}
}p[MAXN];
struct NODE{
	int x, y, w;
	bool operator<(const NODE&t)const{
		return y > t.y;
	}
};
int n,mx;

bool ok(int c)
{
	priority_queue<NODE> q;
	int cnt = 1, now = p[0].x;
	q.push({p[0].x,p[0].y,p[0].w});
	while(now <= mx)
	{
		while(p[cnt].x == now && cnt < n) q.push({p[cnt].x,p[cnt].y,p[cnt].w}), cnt++;
		int tmp = c;
		NODE u;
		bool in = false;
		while(!q.empty() && tmp)
		{
			u = q.top();q.pop();
			if(tmp >= u.w)
			{
				tmp -= u.w;
				u.w = 0;
			}
			else
				u.w -= tmp, tmp = 0;
			in = true;
		}
		if(in && u.w)
			q.push(u);
		++now;
		if(!q.empty() && q.top().y <= now) return false;
	}
	return q.empty();
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int sum = 0;
		scanf("%d%*c", &n);
		mx = 0;
		rep(i,0,n)
		{
			scanf("%d %d %d%*c", &p[i].x, &p[i].y, &p[i].w);
			sum += p[i].w;
			mx = max(mx,p[i].y);
		}
		sort(p,p+n);
		int x = 1, y = sum,ans;
		while(x <= y)
		{
			int m = (x+y)>>1;
			if(ok(m)) ans = m, y = m-1;
			else x = m+1;
		}
		printf("%d\n", ans);
	}
	return 0;
}
