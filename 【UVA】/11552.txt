#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 1000+10;
int dp[MAXN][26][26],k, cnt[MAXN][26], block[MAXN][26],sum[MAXN];
char a[MAXN];

inline int cost(bool same, int num)
{
	if(!same || 1 == sum[num]) return sum[num];
	return sum[num]+1;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d", &t);
	while(t--)
	{
		scanf("%d %s", &k, a+1);
		int n = strlen(a+1);
		if(1 == k)
		{
			int ans = 1;
			repe(i,2,n)
			{
				if(a[i-1] != a[i]) ans++;
			}
			printf("%d\n", ans);
			continue;
		}
		clc(cnt,0);
		repe(i,1,n)
		{
			rep(j,0,26) cnt[i][j] = cnt[i-1][j];
			cnt[i][a[i]-'a']++;
		}
		int len = n/k;
		repe(i,1,len)
		{
			sum[i] = 0;
			rep(j,0,26)
				block[i][j] = cnt[i*k][j]-cnt[(i-1)*k][j];
			rep(j,0,26)
				if(block[i][j]) sum[i]++;
		}
		clc(dp,0x3f);
		rep(x,0,26)
		{
			if(!block[1][x]) continue;
			rep(y,0,26)
			{
				if(!block[1][y]) continue;
				if(x != y || (x == y && block[1][y] > 1))
					dp[1][x][y] = cost(x==y,1);
			}
		}
		repe(i,2,len)
		{
			rep(x,0,26)
			{
				if(!block[i][x]) continue;
				rep(y,0,26)
				{
					if(!block[i][y]) continue;
					int cc = cost(x==y,i);
					if(x != y || (x == y && block[i][y] > 1))
					{
						rep(lx,0,26)
						{
							if(!block[i-1][lx]) continue;
							rep(ly,0,26)
							{
								if(!block[i-1][ly]) continue;
								if(lx != ly || (lx == ly && block[i-1][ly] > 1))
								{
									int tmp = 0;
									if(ly == x) tmp = -1;
									dp[i][x][y] = min(dp[i][x][y], dp[i-1][lx][ly]+cc+tmp);
									int buf = dp[i][x][y];
								}
							}
						}
					}
				}
			}
		}
		int ans = INF;
		rep(i,0,26)
		{
			rep(j,0,26) ans = min(ans,dp[len][i][j]);
		}
		printf("%d\n", ans);
	}
	return 0;
}
