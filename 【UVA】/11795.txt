#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 18;
LL dp[1<<MAXN];
int kill[MAXN],n, ks;

bool can(int s, int v)
{
	int sum = 0;
	if((1<<v)&ks) return true;
	rep(i,0,n)
		if(((1<<i)&s) && ((1<<v)&kill[i])) return true;
	return false;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int t,count = 0;
	scanf("%d", &t);
	while(t--)
	{
		scanf("%d", &n);
		char ch[30];
		ks = 0;
		scanf("%s",ch);
		rep(i,0,n) if('1' == ch[i]) ks |= 1<<i;
		rep(i,0,n)
		{
			kill[i] = 0;
			scanf("%s", ch);
			rep(j,0,n)
				if('1' == ch[j]) kill[i] |= 1<<j;
		}
		clc(dp,0);
		dp[0] = 1;
		int ALL = (1<<n)-1;
		repe(i,1,ALL)
		{
			rep(j,0,n)
			{
				if(!((1<<j)&i)) continue;
				if(!can(i^(1<<j),j)) continue;
				dp[i] += dp[i^(1<<j)];
			}
		}
		printf("Case %d: %lld\n", ++count,dp[ALL]);
	}
	return 0;
}
