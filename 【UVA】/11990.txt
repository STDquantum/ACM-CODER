#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <map>
//#include <unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
#include <ctime>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 200000+10;
struct NODE{
    bool in;
    int sum, v;
    NODE *lc,*rc;
    NODE(int a = 0){
        in = sum = 1;
        v = a;
    }
};
NODE *rt[MAXN];
NODE *null = new NODE(-1);
int a[MAXN], num[MAXN], id[MAXN], n;
 
inline int lowbit(int x){return x&-x;}
inline bool cmp(int x, int y){
    return a[x] < a[y];
}
void bulid(NODE *&u, int x, int y)
{
    if(x > y) return;
    int m = (x+y)>>1;
    u = new NODE(a[num[m]]);
    u->lc = u->rc = null;
    bulid(u->lc,x,m-1);
    bulid(u->rc,m+1,y);
    u->sum = u->lc->sum+u->rc->sum+1;
}
bool fd;
int find_rk(NODE *u, int k, bool b)
{
    if(u == null)
    {
        fd = false;
        return 0;
    }
    if(k == u->v)
    {
        fd = u->in;
        return u->lc->sum+fd;
    }
    if(k < u->v) return find_rk(u->lc,k,b);
    return find_rk(u->rc,k,b)+u->lc->sum+u->in;//注意已经点已经被删除的情况
}
LL query(int x, bool b, int v)//a[1～x]有多少个大于(a = true,否则是小于)v的数
{
    LL sum = 0;
    while(x > 0)
    {
        fd = true;
        int k = find_rk(rt[x],v,b);
        if(b)
        {
            sum += rt[x]->sum-k;
            //if(fd) sum++;
        }
        else
        {
            sum += k-1;
            if(!fd) sum++;
        }
        x -= lowbit(x);
    }
    return sum;
}
void del(NODE *u, int v)//在u树删除v
{
    if(u->v == v)
    {
        u->sum--;
        u->in = false;
        return;
    }
    if(v < u->v) del(u->lc,v);
    else del(u->rc,v);
    u->sum = u->lc->sum + u->rc->sum+u->in;
}
void update(int x)//删除a[x]
{
    int v = a[x];
    while(x <= n)
    {
        del(rt[x], v);
        x += lowbit(x);
    }
}
void pt(NODE *u)
{
    if(null == u) return;
    pt(u->lc);
    if(u->in)
        printf("=%d=\n", u->v);
    pt(u->rc);
}
int main()
{
#ifdef SHY
    freopen("d:\\1.txt", "r", stdin);
#endif
    int m;
    null->sum = 0;
    while(~scanf("%d %d%*c", &n, &m))
    {
        LL sum = 0;
        repe(i,1,n) scanf("%d%*c", &a[i]), id[a[i]] = i;
        repe(i,1,n) 
        {
            int st = i-lowbit(i)+1;
            repe(j,st,i) num[j-st] = j;
            sort(num,num+lowbit(i),cmp);
            bulid(rt[i], 0,lowbit(i)-1);
            sum += query(i,1,a[i]);
        }
        while(m--)
        {
            printf("%lld\n", sum);
            int v;
            scanf("%d\n", &v);
            update(id[v]);
            LL b = query(id[v], 1,v);
            //printf("b = %d\n", b);
            LL c = query(n,0,v);
            LL d = query(id[v],0,v);
            sum -= b+(c-d);
        }
    }
    return 0;
}
