#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define MAXT 300
#define MAXN 55
#define INF 0x3f3f3f3f
bool has[2][MAXT][MAXN];//has[0][i][j]表示i分钟在j占有没有向右开的车停靠，has[1][][]是向左的
int c[MAXN], dp[MAXT][MAXN];
//dp[i][j]花i时间在j站最少还需要等待多少时间

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int n, count = 0;
	while (~scanf("%d%*c", &n) && n)
	{
		int t, a, m;
		scanf("%d%*c", &t);
		memset(has,0,sizeof(has));
		for (int i = 1; i < n; i++)
			scanf("%d%*c", &c[i]);
		scanf("%d%*c", &m);
		for (int i = 0; i < m; i++)
		{
			scanf("%d%*c", &a);
			for (int j = 1; j < n; a += c[j], j++)
				has[0][a][j] = true;
			has[0][a][n] = true;
		}
		scanf("%d%*c", &m);
		for (int i = 0; i < m; i++)
		{
			scanf("%d%*c", &a);
			for (int j = n; j > 1; a += c[j-1],j--)
				has[1][a][j] = true;
			has[1][a][1] = true;
		}
		memset(dp[t],0x3f,sizeof(dp[t]));
		dp[t][n] = 0;
		for (int i = t - 1; i >= 0; i--)
		{
			for (int j = 1; j <= n; j++)
			{
				dp[i][j] = dp[i + 1][j] + 1;
				if (j < n && has[0][i][j] && i + c[j] <= t)
					dp[i][j] = min(dp[i][j], dp[i+c[j]][j+1]);
				if (j > 1 && has[1][i][j] && i + c[j - 1] <= t)
					dp[i][j] = min(dp[i][j], dp[i+c[j-1]][j-1]);
			}
		}
		printf("Case Number %d: ", ++count);
		if (dp[0][1] >= INF)
			puts("impossible");
		else
			printf("%d\n", dp[0][1]);
	}
	return 0;
}