#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define clc(a,b) memset(a,b,sizeof(a));
#define pb push_back
#define MAXN 410
#define INF 0x3f3f3f3f
struct HC{
	vector<int> g[MAXN];
	int dx[MAXN], dy[MAXN], mx[MAXN], my[MAXN];;
	int dis, n;
	bool used[MAXN];
	//n是左边点数的数量(从0开始，1开始需要改掉//*==的地方)；
	//g[i]：i表示左边的点标号，g[i]里面的是右边的点标号
	void init(int n)
	{
		this->n = n;
		rep(i,0,n) g[i].clear();
	}
	bool SearchP()
	{
		queue<int>q;
		dis = INF;
		memset(dx, -1, sizeof(dx));
		memset(dy, -1, sizeof(dy));
		rep(i, 0, n)//*==
		{
			if (mx[i] == -1)
			{
				q.push(i);
				dx[i] = 0;
			}
		}
		while (!q.empty())
		{
			int u = q.front();
			q.pop();
			if (dx[u] > dis)break;
			int sz = g[u].size();
			rep(i, 0, sz)
			{
				int v = g[u][i];
				if (dy[v] == -1)
				{
					dy[v] = dx[u] + 1;
					if (my[v] == -1)dis = dy[v];
					else
					{
						dx[my[v]] = dy[v] + 1;
						q.push(my[v]);
					}
				}
			}
		}
		return dis != INF;
	}
	bool DFS(int u)
	{
		int sz = g[u].size();
		rep(i, 0, sz)
		{
			int v = g[u][i];
			if (!used[v] && dy[v] == dx[u] + 1)
			{
				used[v] = true;
				if (my[v] != -1 && dy[v] == dis)continue;
				if (my[v] == -1 || DFS(my[v]))
				{
					my[v] = u;
					mx[u] = v;
					return true;
				}
			}
		}
		return false;
	}
	int MaxMatch()
	{
		int res = 0;
		clc(mx, -1);
		clc(my, -1);
		while (SearchP())
		{
			clc(used, 0);
			rep(i, 0, n)//*==
			{
				if (mx[i] == -1 && DFS(i))
					res++;
			}
		}
		return res;
	}
}hc;
map<string, int> num;
int a[MAXN],b[MAXN], dp[MAXN];
bool vis[MAXN];
vector<int> g[MAXN];

int find(char* a)
{
	if(num.find(a) == num.end())
	{
		int sz = num.size();
		num[a] = sz;
	}
	return num[a];
}
void bfs(int st)
{
	queue<int> q;
	clc(dp,0x3f);
	clc(vis,0);
	q.push(st);
	dp[st] = 0;
	vis[st] = true;
	while(!q.empty())
	{
		int u = q.front();q.pop();
		int sz = g[u].size();
		rep(i,0,sz)
		{
			int v = g[u][i];
			if(!vis[v])
			{
				dp[v] = dp[u]+1;
				vis[v] = true;
				q.push(v);
			}
		}
	}
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n,m,k;
		char ch[30],to[30];
		num.clear();
		scanf("%d%*c", &n);
		rep(i,0,n)
		{
			gets(ch);
			a[i] = find(ch);
		}
		scanf("%d%*c", &m);
		rep(i,0,m)
		{
			scanf("%*s %s", ch);
			b[i] = find(ch);
		}
		rep(i,0,n) g[i].clear();
		scanf("%d%*c", &k);
		rep(i,0,k)
		{
			scanf("%s %s%*c", &ch, &to);
			g[find(to)].push_back(find(ch));
		}
		hc.init(n);
		rep(i,0,n)
		{
			bfs(a[i]);
			rep(j,0,m)
			{
				if(INF != dp[b[j]])
					hc.g[i].push_back(j);
			}
		}
		printf("%d\n", m-hc.MaxMatch());
		if(t) putchar('\n');
	}
	return 0;
}