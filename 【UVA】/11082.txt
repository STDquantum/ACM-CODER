#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define clc(a,b) memset(a,b,sizeof(a))
#define MAXN 55
#define INF 0x3f3f3f3f
struct Dinic{
	struct Edge{
		int from, to, cap, flow;
		Edge(int a, int b, int c, int d){
			from = a, to = b, cap = c, flow = d;
		}
	};
	int n,s,t, d[MAXN], cur[MAXN];
	//n是总的节点数，d[i]起点到i的距离，cur当前弧下标
	vector<Edge> edge;
	vector<int> g[MAXN];
	bool vis[MAXN];
	void init(int n)
	{
		this->n = n;
		edge.clear();
		rep(i,0,n) g[i].clear();
	}
	void add_edge(int from, int to, int cap)
	{
		edge.push_back(Edge(from,to,cap,0));
		edge.push_back(Edge(to,from,0,0));
		int m = edge.size();
		g[from].push_back(m-2);
		g[to].push_back(m-1);
	}
	bool bfs()
	{
		clc(vis,0);
		queue<int> q;
		q.push(s);
		d[s] = 0;
		vis[s] = true;
		while(!q.empty())
		{
			int x = q.front();q.pop();
			int sz = g[x].size();
			rep(i,0,sz)
			{
				Edge& e = edge[g[x][i]];
				if(!vis[e.to] && e.cap > e.flow)
				{
					vis[e.to] = true;
					d[e.to] = d[x]+1;
					q.push(e.to);
				}
			}
		}
		return vis[t];
	}
	int dfs(int x, int a)
	{
		if(x == t || !a) return a;
		int flow = 0,f, sz = g[x].size();
		rep(i,cur[x],sz)
		{
			Edge& e = edge[g[x][i]];
			if(d[x]+1 == d[e.to] && (f = dfs(e.to,min(a,e.cap-e.flow))) > 0)
			{
				e.flow += f;
				edge[g[x][i]^1].flow -= f;
				flow += f;
				a -= f;
				if(!a) break;
			}
		}
		return flow;
	}
	int maxflow(int s, int t)
	{
		this->s = s, this->t = t;
		int flow = 0;
		while(bfs())
		{
			clc(cur,0);
			flow += dfs(s,INF);
		}
		return flow;
	}
}dinic;
int ans[MAXN][MAXN];

int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t, count = 0;
	scanf("%d%*c", &t);
	while(t--)
	{
		int n,m,a, b = 0;
		scanf("%d %d%*c", &n, &m);
		int st = n+m, ed = st+1;
		dinic.init(ed+1);
		rep(i,0,n)
		{
			scanf("%d%*c", &a);
			dinic.add_edge(st,i,a-b-m);
			b = a;
		}
		b = 0;
		rep(i,0,m)
		{
			scanf("%d%*c", &a);
			dinic.add_edge(i+n,ed,a-b-n);
			b = a;
		}
		rep(i,0,n)
			rep(j,0,m) dinic.add_edge(i,j+n,19);
		dinic.maxflow(st,ed);
		printf("Matrix %d\n", ++count);
		int sz = dinic.edge.size();
		rep(i,0,sz)
		{
			if(st == dinic.edge[i].from || ed == dinic.edge[i].to || !dinic.edge[i].cap) continue;
			ans[dinic.edge[i].from][dinic.edge[i].to-n] = dinic.edge[i].flow+1;
		}
		rep(i,0,n)
		{
			rep(j,0,m-1)
				printf("%d ", ans[i][j]);
			printf("%d\n", ans[i][m-1]);
		}
	}
	return 0;
}