/*
题目大意是求最少的工作正常的LED（一条横杠或竖杠代表一个正常的LED）能够表示出题目给定的所有数字。LED最大数目是15，每一条LED要么亮（正常）要么不亮（不正常），所以最多的情况就是2^15=32768种，我们把所有的情况枚举完毕，得出所需的最少的正常的LED。 
这道题目我们可以用二进制的1代表LED工作正常，0代表不正常。所以我们只需要从0开始枚举，一直枚举到2^P-1。即for(i=0;i<=2^P-1;i++)，那么对于每一个i，我们都跟题目所给的N个数进行按位&运算（题目给定了N个要表示的数，题目是以二进制给出的，我们可以转换成10进制）。得到了N个&运算的结果，如果这N个数都是不相同的，那么说明这种情况下可以表示出所以的数字，我们再把这种情况下对应LED数目算出来（实际上就是i的二进制有多少个1），枚举完所有的i最后得出最少的LED数目。 
之所以要进行按位&运算，就是说当这段LED是正常的并且要表示的数的这段LED是需要亮的时候这段LED才会发亮。&运算的结果可以看作是要表示的数的LED效果，当所有要表示的数的LED效果都不相同时，说明这种情况下是可以把所有的数表示出来的（这个i是合法的）。 
*/
#include <stdio.h>
//#define scanf scanf_s
const int maxvis = (1<<15)+5, maxh = 105, maxw = 16;
int num[maxh], h;

int count(int s)//统计s的二进制形式有多少个1
{
	int sum = 0;
	while(s)
	{
		if (s&1)
			sum++;
		s >>= 1;
	}
	return sum;
}

int main ()
{
	//FILE *f;
	//freopen_s(&f, "e:\\1.txt","r",stdin);
	int t;
	scanf ("%d%*c", &t);
	while(t--)
	{
		int w, i, j, a, ans, len, pos, k;
		scanf ("%d%*c%d%*c", &w, &h);
		for(i = 0; i < h; i++)
		{
			scanf ("%d%*c", &num[i]);
			for (j = 1; j < w; j++)//读取一行二进制数转换成10进制
			{
				scanf ("%d%*c", &a);
				num[i] = (num[i]<<1)+a;
			}
		}
		ans = 999999, len = 1<<w;
		for(i = 0; i < len; i++)//枚举所有可能的状态
		{
			pos = count(i);
//如果有一个状态内没坏的灯的数量比已经找到过的状态灯要多就不用找
			if (pos >= ans) continue;
			bool vis[maxvis] = {0};
			for (j = 0; j < h; j++)
			{
				k = i&num[j];//i&num[i]刚好能把还没坏的并且需要显示出来的数字的那部分显示出来
				if (vis[k])//如果该状态已经到达过，说明存在两个数字在这组灯的状态下显示的一样
					break;//一样的话这第i组状态就不符合要求了
				vis[k] = true;
			}
			if (j < h)
				continue;
			ans = pos;
		}
		printf ("%d\n", ans);
	}

	return 0;
}