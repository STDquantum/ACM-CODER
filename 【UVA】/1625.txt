#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define MAXN 5005
struct NODE{//f[]记录每个字母是否已经出现，g[]记录每个字母是否已经结束
	bool f[2][MAXN], g[2][MAXN];
}s[30];
char a[2][MAXN];
int dp[MAXN][MAXN], len[2];

void find()//寻找每个字母在两个序列首次出现和结束的位置
{
	for (int i = 0; i < 26; i++)
	{
		for (int k = 0; k < 2; k++)
		{
			int st = -1, ed = -1;
			for (int j = 0; j < len[k]; j++)
			{
				if (i + 'A' == a[k][j])
				{
					st = j;
					break;
				}
			}
			for (int j = len[k] - 1; j >= 0; j--)
			{
				if (i + 'A' == a[k][j])
				{
					ed = j;
					break;
				}
			}
			if (-1 != st)
			{
				for (int j = st + 1; j <= len[k]; j++)
					s[i].f[k][j] = 1;
				for (int j = 1; j <= ed + 1; j++)
					s[i].g[k][j] = 1;
			}
		}
	}
}
int main()
{
#ifdef SHY
	freopen("e:\\1.txt", "r", stdin);
#endif
	int t;
	scanf("%d%*c", &t);
	while (t--)
	{
		gets(a[0]), len[0] = strlen(a[0]);
		gets(a[1]), len[1] = strlen(a[1]);
		memset(s, 0, sizeof(s));
		memset(dp[0], 0x3f, sizeof(dp[0]));
		dp[0][0] = 0;
		find();
		for (int i = 0; i <= len[0]; i++)
		{
			memset(dp[i + 1], 0x3f, sizeof(dp[i + 1]));//直接对dp[][]一起赋值会超时
			for (int j = 0; j <= len[1]; j++)
			{
				if (i < len[0])//在第一个序列移除i+1的时候
				{
					int t = dp[i][j], p = a[0][i] - 'A';
					if (!s[p].f[0][i] && !s[p].f[1][j]) t -= i + j;//当前字母p是不是第一次被移除
					if (!s[p].g[0][i + 2] && !s[p].g[1][j + 1]) t += i + j;//当前字母是不是最后一次被移除
					dp[i+1][j] = min(dp[i+1][j], t);
				}
				if (j < len[1])//在第二个序列移除j+1的时候
				{
					int t = dp[i][j], p = a[1][j] - 'A';
					if (!s[p].f[0][i] && !s[p].f[1][j]) t -= i + j;
					if (!s[p].g[0][i + 1] && !s[p].g[1][j + 2]) t += i + j;
					dp[i][j + 1] = min(dp[i][j + 1], t);
				}
			}
		}
		printf("%d\n", dp[len[0]][len[1]]);
	}
	return 0;
}