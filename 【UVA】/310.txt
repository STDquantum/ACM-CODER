/*题意：在D0L这样一个系统中存在一个有限的集合（包含字母），一个P集合（字母的映射）和一个初始串。题目给定一个初始串，叫你判断是否能通过不断映射构成目标串或者包含该目标串的串。例如a->aa,b->bb,初始串为ab，目标串为aaabb，这样的话，初始串根据映射衍化（注意，扩展时必须同时采用两规则）：ab(a->aa，b->bb)->aabb->aaaabbbb 这样就得到了含有目标串的串，输出YES。

思路：
        1.BFS穷举所有状态。

        2.保存每个状态。

        3.存储所有和目标串长度相等的状态，利用HASH判重。

eg:
aa
bb
ab
aaaaabb
aaaaaaaaaabbbbb
aaaaaabbbbbbbbb
baaaababababaaa
abababbb
a
b
ab
ba
a
b
ab
ab
a
b
aaab
ba
YES
NO
NO
YES
NO
*/
#include <stdio.h>
#include <string.h>
#define MAXS 65537
#define MAXC 16
struct QUE{
	char s[MAXC];
}que[MAXS];
char a[MAXC], b[MAXC], st[MAXC], ed[MAXC], temp[300];
bool find, vis[MAXS];
int front, rear, lened;

void bfs();
int main ()
{
#ifdef DSHY
	freopen("e:\\1.txt","r",stdin);
#endif
	while(EOF != scanf("%s%*c", a))
	{
		scanf ("%s%*c%s%*c%s%*c", b,st,ed);
		find = false;
		lened = strlen(ed);
		memset(vis,false,sizeof(vis));
		temp[0] = 0;
		bfs();
		if (find || ed[0] == '\0')
			printf ("YES\n");
		else
			printf ("NO\n");
	}
	return 0;
}

int get_hash(char *s)//得到hash值,用1和2代替0 1表示二进制，防止出现001和00001冲突
{
	int v = 0, i, len = strlen(s);
	for (i = 0; i < len; i++)
		v = (v<<1)+s[i]-'a'+1;
	return v;
}
void insert(char *a)//把每个a序列的所有没有访问过的子集加入队列
{
	int lena = strlen(a), i, j, k;
	for (i = 0;i < lena; i++)
	{
		for (j = 0, k = i; k < lena && j < lened; j++,k++)
			que[rear].s[j] = a[k];
		que[rear].s[j] = '\0';
		int t = get_hash(que[rear].s);
		if (!vis[t])
		{
			vis[t] = true;
			rear++;
		}
	}
}
void bfs()
{
	if (strstr(st, ed))
	{
		find = true;
		return;
	}
	int anss = get_hash(ed), i, len;
	front = -1, rear = 0;
	insert(st);
	while(1 != rear-front)
	{
		if (vis[anss])
		{
			find = true;
			return;
		}
		len = strlen(que[++front].s);
		temp[0] = 0;
		for (i = 0;  i < len; i++)
		{
			if ('a' == que[front].s[i])
				strcat(temp,a);
			else if ('b' == que[front].s[i])
				strcat(temp,b);
		}
		insert(temp);
	}
}
