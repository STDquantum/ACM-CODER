#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <set>
//#include <unordered_map>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
#define rep(i,a,n) for(int i = a; i < n; i++)
#define repe(i,a,n) for(int i = a; i <= n; i++)
#define per(i,n,a) for(int i = n; i >= a; i--)
#define clc(a,b) memset(a,b,sizeof(a))
const int INF = 0x3f3f3f3f, MAXN = 50+10, MAXM = 1000000+10;
int cnt,a[21*21+10], ans[10],len, tmp[10], id[MAXM], n,all;
bool fd[MAXN], vis[21*21*10];

inline int find_max(int *s,int p){
	return s[p];
}
int next_sum(int sum, int p, int *c, int& tol)
{
	int v = tmp[p];
	rep(i,0,p)
	{
		int x = abs(v-tmp[i]);
		if(~id[x] && !fd[id[x]])
		{
			c[tol++] = id[x];
			sum++;
			fd[id[x]] = true;
		}
	}
	return sum;
}
void dfs(int p, int st, int sum)
{
	if(p > len) return;
	if(all == sum)
	{
		if(p < len)
		{
			len = p;
			memcpy(ans,tmp,sizeof(tmp));
		}
		else
		{
			if(find_max(tmp,p) < find_max(ans,len))
				memcpy(ans,tmp,sizeof(tmp));
		}
		return;
	}
	if(p > 6) return;
	rep(i,st,cnt)
	{
		if(vis[i]) continue;
		vis[i] = true;
		int buf[10], tol = 0;
		tmp[p+1] = a[i];
		int now = next_sum(sum,p+1,buf,tol);
		dfs(p+1,i+1,now);
		rep(i,0,tol) fd[buf[i]] = 0;
		vis[i] = false;
	}
}
set<int> have;
bool add(int key)
{
	if(have.find(key) == have.end())
	{
		have.insert(key);
		cnt++;
		return true;
	}
	return false;
}
int main()
{
#ifdef SHY
	freopen("d:\\1.txt", "r", stdin);
#endif
	int count = 0;
	ans[0] = tmp[0] = 0;
	while(~scanf("%d%*c", &n) && n)
	{
		have.clear();
		have.insert(0);
		cnt = 0;
		rep(i,0,n)
		{
			scanf("%d%*c", &a[cnt]);
			add(a[cnt]);
		}
		sort(a,a+cnt);
		clc(id,-1);
		rep(i,0,cnt) id[a[i]] = i;

		all = cnt;
		rep(i,0,all)
		{
			rep(j,0,all)
			{
				int v = a[i]+a[j];
				if(v < a[all-1] && add(v))
					a[cnt-1] = v;
				v = abs(a[i]-a[j]);
				if(v < a[all-1] && add(v))
					a[cnt-1] = v;
			}
		}
		sort(a,a+cnt);
		len = INF;
		clc(fd,0);
		dfs(0,0,0);
		printf("Case %d:\n%d\n0",++count,len+1);
		repe(i,1,len) printf(" %d", ans[i]);
		putchar('\n');
	}
	return 0;
}